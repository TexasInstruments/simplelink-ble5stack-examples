#
# Generated by erpcgen 1.7.4 on Thu Jun  3 17:44:56 2021.
#
# AUTOGENERATED - DO NOT EDIT
#

import erpc
from . import common, interface

# Client for BLEmesh_api
class BLEmesh_apiClient(interface.IBLEmesh_api):
    def __init__(self, manager):
        super(BLEmesh_apiClient, self).__init__()
        self._clientManager = manager

    def mesh_init(self):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.MESH_INIT_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def bt_mesh_init_prov_raw_init(self, prov_raw):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.BT_MESH_INIT_PROV_RAW_INIT_ID,
                sequence=request.sequence))
        if prov_raw is None:
            raise ValueError("prov_raw is None")
        prov_raw._write(codec)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def bt_mesh_init_comp_raw_init(self, comp_raw):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.BT_MESH_INIT_COMP_RAW_INIT_ID,
                sequence=request.sequence))
        if comp_raw is None:
            raise ValueError("comp_raw is None")
        comp_raw._write(codec)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def bt_mesh_init_elem_raw_init(self, elem_index, elem_raw):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.BT_MESH_INIT_ELEM_RAW_INIT_ID,
                sequence=request.sequence))
        if elem_index is None:
            raise ValueError("elem_index is None")
        codec.write_uint16(elem_index)
        if elem_raw is None:
            raise ValueError("elem_raw is None")
        elem_raw._write(codec)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def bt_mesh_cfg_cli_raw_init(self, elem_index, model_index):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.BT_MESH_CFG_CLI_RAW_INIT_ID,
                sequence=request.sequence))
        if elem_index is None:
            raise ValueError("elem_index is None")
        codec.write_uint16(elem_index)
        if model_index is None:
            raise ValueError("model_index is None")
        codec.write_uint16(model_index)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def bt_mesh_init_model_raw_init(self, elem_index, model_index, model_raw, op_raw):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.BT_MESH_INIT_MODEL_RAW_INIT_ID,
                sequence=request.sequence))
        if elem_index is None:
            raise ValueError("elem_index is None")
        codec.write_uint16(elem_index)
        if model_index is None:
            raise ValueError("model_index is None")
        codec.write_uint16(model_index)
        if model_raw is None:
            raise ValueError("model_raw is None")
        model_raw._write(codec)
        if op_raw is None:
            raise ValueError("op_raw is None")
        codec.start_write_list(len(op_raw))
        for _i0 in op_raw:
            _i0._write(codec)


        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def bt_mesh_cfg_srv_raw_init(self, elem_index):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.BT_MESH_CFG_SRV_RAW_INIT_ID,
                sequence=request.sequence))
        if elem_index is None:
            raise ValueError("elem_index is None")
        codec.write_uint16(elem_index)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def bt_mesh_health_srv_raw_init(self, elem_index, model_index, health_srv, max_faults):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.BT_MESH_HEALTH_SRV_RAW_INIT_ID,
                sequence=request.sequence))
        if elem_index is None:
            raise ValueError("elem_index is None")
        codec.write_uint16(elem_index)
        if model_index is None:
            raise ValueError("model_index is None")
        codec.write_uint16(model_index)
        if health_srv is None:
            raise ValueError("health_srv is None")
        health_srv._write(codec)
        if max_faults is None:
            raise ValueError("max_faults is None")
        codec.write_uint8(max_faults)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def bt_mesh_reset(self):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.BT_MESH_RESET_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)

    def bt_mesh_suspend(self):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.BT_MESH_SUSPEND_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def bt_mesh_resume(self):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.BT_MESH_RESUME_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def bt_mesh_iv_update_test(self, enable):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.BT_MESH_IV_UPDATE_TEST_ID,
                sequence=request.sequence))
        if enable is None:
            raise ValueError("enable is None")
        codec.write_bool(enable)

        # Send request and process reply.
        self._clientManager.perform_request(request)

    def bt_mesh_iv_update(self):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.BT_MESH_IV_UPDATE_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_bool()
        return _result

    def bt_mesh_lpn_set(self, enable):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.BT_MESH_LPN_SET_ID,
                sequence=request.sequence))
        if enable is None:
            raise ValueError("enable is None")
        codec.write_bool(enable)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def bt_mesh_lpn_poll(self):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.BT_MESH_LPN_POLL_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def bt_mesh_input_string(self, str):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.BT_MESH_INPUT_STRING_ID,
                sequence=request.sequence))
        if str is None:
            raise ValueError("str is None")
        codec.write_string(str)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def bt_mesh_input_number(self, num):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.BT_MESH_INPUT_NUMBER_ID,
                sequence=request.sequence))
        if num is None:
            raise ValueError("num is None")
        codec.write_uint32(num)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def bt_mesh_prov_enable_wrapper(self, bearers):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.BT_MESH_PROV_ENABLE_WRAPPER_ID,
                sequence=request.sequence))
        if bearers is None:
            raise ValueError("bearers is None")
        codec.write_uint32(bearers)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def bt_mesh_prov_disable_wrapper(self, bearers):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.BT_MESH_PROV_DISABLE_WRAPPER_ID,
                sequence=request.sequence))
        if bearers is None:
            raise ValueError("bearers is None")
        codec.write_uint32(bearers)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def bt_mesh_provision(self, net_key, net_idx, flags, iv_index, addr, dev_key):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.BT_MESH_PROVISION_ID,
                sequence=request.sequence))
        if net_key is None:
            raise ValueError("net_key is None")
        for _i0 in net_key:
            codec.write_uint8(_i0)

        if net_idx is None:
            raise ValueError("net_idx is None")
        codec.write_uint16(net_idx)
        if flags is None:
            raise ValueError("flags is None")
        codec.write_uint8(flags)
        if iv_index is None:
            raise ValueError("iv_index is None")
        codec.write_uint32(iv_index)
        if addr is None:
            raise ValueError("addr is None")
        codec.write_uint16(addr)
        if dev_key is None:
            raise ValueError("dev_key is None")
        for _i0 in dev_key:
            codec.write_uint8(_i0)


        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def bt_mesh_cfg_app_key_add_wrapper(self, net_idx, addr, key_net_idx, key_app_idx, app_key):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.BT_MESH_CFG_APP_KEY_ADD_WRAPPER_ID,
                sequence=request.sequence))
        if net_idx is None:
            raise ValueError("net_idx is None")
        codec.write_uint16(net_idx)
        if addr is None:
            raise ValueError("addr is None")
        codec.write_uint16(addr)
        if key_net_idx is None:
            raise ValueError("key_net_idx is None")
        codec.write_uint16(key_net_idx)
        if key_app_idx is None:
            raise ValueError("key_app_idx is None")
        codec.write_uint16(key_app_idx)
        if app_key is None:
            raise ValueError("app_key is None")
        for _i0 in app_key:
            codec.write_uint8(_i0)


        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def bt_mesh_cfg_mod_app_bind_vnd_wrapper(self, net_idx, addr, elem_addr, mod_app_idx, mod_id, cid):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.BT_MESH_CFG_MOD_APP_BIND_VND_WRAPPER_ID,
                sequence=request.sequence))
        if net_idx is None:
            raise ValueError("net_idx is None")
        codec.write_uint16(net_idx)
        if addr is None:
            raise ValueError("addr is None")
        codec.write_uint16(addr)
        if elem_addr is None:
            raise ValueError("elem_addr is None")
        codec.write_uint16(elem_addr)
        if mod_app_idx is None:
            raise ValueError("mod_app_idx is None")
        codec.write_uint16(mod_app_idx)
        if mod_id is None:
            raise ValueError("mod_id is None")
        codec.write_uint16(mod_id)
        if cid is None:
            raise ValueError("cid is None")
        codec.write_uint16(cid)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def bt_mesh_cfg_mod_app_bind_wrapper(self, net_idx, addr, elem_addr, mod_app_idx, mod_id):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.BT_MESH_CFG_MOD_APP_BIND_WRAPPER_ID,
                sequence=request.sequence))
        if net_idx is None:
            raise ValueError("net_idx is None")
        codec.write_uint16(net_idx)
        if addr is None:
            raise ValueError("addr is None")
        codec.write_uint16(addr)
        if elem_addr is None:
            raise ValueError("elem_addr is None")
        codec.write_uint16(elem_addr)
        if mod_app_idx is None:
            raise ValueError("mod_app_idx is None")
        codec.write_uint16(mod_app_idx)
        if mod_id is None:
            raise ValueError("mod_id is None")
        codec.write_uint16(mod_id)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def bt_mesh_cfg_mod_sub_add_vnd_wrapper(self, net_idx, addr, elem_addr, sub_addr, mod_id, cid):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.BT_MESH_CFG_MOD_SUB_ADD_VND_WRAPPER_ID,
                sequence=request.sequence))
        if net_idx is None:
            raise ValueError("net_idx is None")
        codec.write_uint16(net_idx)
        if addr is None:
            raise ValueError("addr is None")
        codec.write_uint16(addr)
        if elem_addr is None:
            raise ValueError("elem_addr is None")
        codec.write_uint16(elem_addr)
        if sub_addr is None:
            raise ValueError("sub_addr is None")
        codec.write_uint16(sub_addr)
        if mod_id is None:
            raise ValueError("mod_id is None")
        codec.write_uint16(mod_id)
        if cid is None:
            raise ValueError("cid is None")
        codec.write_uint16(cid)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def bt_mesh_cfg_mod_sub_add_wrapper(self, net_idx, addr, elem_addr, sub_addr, mod_id):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.BT_MESH_CFG_MOD_SUB_ADD_WRAPPER_ID,
                sequence=request.sequence))
        if net_idx is None:
            raise ValueError("net_idx is None")
        codec.write_uint16(net_idx)
        if addr is None:
            raise ValueError("addr is None")
        codec.write_uint16(addr)
        if elem_addr is None:
            raise ValueError("elem_addr is None")
        codec.write_uint16(elem_addr)
        if sub_addr is None:
            raise ValueError("sub_addr is None")
        codec.write_uint16(sub_addr)
        if mod_id is None:
            raise ValueError("mod_id is None")
        codec.write_uint16(mod_id)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def bt_mesh_cfg_mod_sub_del_wrapper(self, net_idx, addr, elem_addr, sub_addr, mod_id):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.BT_MESH_CFG_MOD_SUB_DEL_WRAPPER_ID,
                sequence=request.sequence))
        if net_idx is None:
            raise ValueError("net_idx is None")
        codec.write_uint16(net_idx)
        if addr is None:
            raise ValueError("addr is None")
        codec.write_uint16(addr)
        if elem_addr is None:
            raise ValueError("elem_addr is None")
        codec.write_uint16(elem_addr)
        if sub_addr is None:
            raise ValueError("sub_addr is None")
        codec.write_uint16(sub_addr)
        if mod_id is None:
            raise ValueError("mod_id is None")
        codec.write_uint16(mod_id)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def bt_mesh_cfg_mod_sub_del_vnd_wrapper(self, net_idx, addr, elem_addr, sub_addr, mod_id, cid):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.BT_MESH_CFG_MOD_SUB_DEL_VND_WRAPPER_ID,
                sequence=request.sequence))
        if net_idx is None:
            raise ValueError("net_idx is None")
        codec.write_uint16(net_idx)
        if addr is None:
            raise ValueError("addr is None")
        codec.write_uint16(addr)
        if elem_addr is None:
            raise ValueError("elem_addr is None")
        codec.write_uint16(elem_addr)
        if sub_addr is None:
            raise ValueError("sub_addr is None")
        codec.write_uint16(sub_addr)
        if mod_id is None:
            raise ValueError("mod_id is None")
        codec.write_uint16(mod_id)
        if cid is None:
            raise ValueError("cid is None")
        codec.write_uint16(cid)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def bt_mesh_cfg_mod_sub_va_add_wrapper(self, net_idx, addr, elem_addr, label, mod_id):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.BT_MESH_CFG_MOD_SUB_VA_ADD_WRAPPER_ID,
                sequence=request.sequence))
        if net_idx is None:
            raise ValueError("net_idx is None")
        codec.write_uint16(net_idx)
        if addr is None:
            raise ValueError("addr is None")
        codec.write_uint16(addr)
        if elem_addr is None:
            raise ValueError("elem_addr is None")
        codec.write_uint16(elem_addr)
        if label is None:
            raise ValueError("label is None")
        for _i0 in label:
            codec.write_uint8(_i0)

        if mod_id is None:
            raise ValueError("mod_id is None")
        codec.write_uint16(mod_id)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def bt_mesh_cfg_mod_sub_va_add_vnd_wrapper(self, net_idx, addr, elem_addr, label, mod_id, cid):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.BT_MESH_CFG_MOD_SUB_VA_ADD_VND_WRAPPER_ID,
                sequence=request.sequence))
        if net_idx is None:
            raise ValueError("net_idx is None")
        codec.write_uint16(net_idx)
        if addr is None:
            raise ValueError("addr is None")
        codec.write_uint16(addr)
        if elem_addr is None:
            raise ValueError("elem_addr is None")
        codec.write_uint16(elem_addr)
        if label is None:
            raise ValueError("label is None")
        for _i0 in label:
            codec.write_uint8(_i0)

        if mod_id is None:
            raise ValueError("mod_id is None")
        codec.write_uint16(mod_id)
        if cid is None:
            raise ValueError("cid is None")
        codec.write_uint16(cid)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def bt_mesh_cfg_mod_pub_set_wrapper(self, net_idx, addr, elem_addr, mod_id, pub):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.BT_MESH_CFG_MOD_PUB_SET_WRAPPER_ID,
                sequence=request.sequence))
        if net_idx is None:
            raise ValueError("net_idx is None")
        codec.write_uint16(net_idx)
        if addr is None:
            raise ValueError("addr is None")
        codec.write_uint16(addr)
        if elem_addr is None:
            raise ValueError("elem_addr is None")
        codec.write_uint16(elem_addr)
        if mod_id is None:
            raise ValueError("mod_id is None")
        codec.write_uint16(mod_id)
        if pub is None:
            raise ValueError("pub is None")
        pub._write(codec)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def bt_mesh_cfg_mod_pub_set_vnd_wrapper(self, net_idx, addr, elem_addr, mod_id, cid, pub):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.BT_MESH_CFG_MOD_PUB_SET_VND_WRAPPER_ID,
                sequence=request.sequence))
        if net_idx is None:
            raise ValueError("net_idx is None")
        codec.write_uint16(net_idx)
        if addr is None:
            raise ValueError("addr is None")
        codec.write_uint16(addr)
        if elem_addr is None:
            raise ValueError("elem_addr is None")
        codec.write_uint16(elem_addr)
        if mod_id is None:
            raise ValueError("mod_id is None")
        codec.write_uint16(mod_id)
        if cid is None:
            raise ValueError("cid is None")
        codec.write_uint16(cid)
        if pub is None:
            raise ValueError("pub is None")
        pub._write(codec)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def bt_mesh_is_provisioned(self):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.BT_MESH_IS_PROVISIONED_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_bool()
        return _result

    def bt_mesh_proxy_identity_enable(self):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.BT_MESH_PROXY_IDENTITY_ENABLE_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def bt_mesh_model_publish_wrapper(self, elem_idx, is_vnd, model_index, msg):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.BT_MESH_MODEL_PUBLISH_WRAPPER_ID,
                sequence=request.sequence))
        if elem_idx is None:
            raise ValueError("elem_idx is None")
        codec.write_uint16(elem_idx)
        if is_vnd is None:
            raise ValueError("is_vnd is None")
        codec.write_uint8(is_vnd)
        if model_index is None:
            raise ValueError("model_index is None")
        codec.write_uint16(model_index)
        if msg is None:
            raise ValueError("msg is None")
        msg._write(codec)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def bt_mesh_model_send_data_wrapper(self, elem_idx, is_vnd, model_index, ctx, msg):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.BT_MESH_MODEL_SEND_DATA_WRAPPER_ID,
                sequence=request.sequence))
        if elem_idx is None:
            raise ValueError("elem_idx is None")
        codec.write_uint16(elem_idx)
        if is_vnd is None:
            raise ValueError("is_vnd is None")
        codec.write_uint8(is_vnd)
        if model_index is None:
            raise ValueError("model_index is None")
        codec.write_uint16(model_index)
        if ctx is None:
            raise ValueError("ctx is None")
        ctx._write(codec)
        if msg is None:
            raise ValueError("msg is None")
        msg._write(codec)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def bt_mesh_model_find_wrapper(self, elem_idx, id):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.BT_MESH_MODEL_FIND_WRAPPER_ID,
                sequence=request.sequence))
        if elem_idx is None:
            raise ValueError("elem_idx is None")
        codec.write_uint16(elem_idx)
        if id is None:
            raise ValueError("id is None")
        codec.write_uint16(id)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def bt_mesh_model_find_vnd_wrapper(self, elem_idx, company, id):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.BT_MESH_MODEL_FIND_VND_WRAPPER_ID,
                sequence=request.sequence))
        if elem_idx is None:
            raise ValueError("elem_idx is None")
        codec.write_uint16(elem_idx)
        if company is None:
            raise ValueError("company is None")
        codec.write_uint16(company)
        if id is None:
            raise ValueError("id is None")
        codec.write_uint16(id)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def bt_mesh_model_extend_wrapper(self, mod_elem_idx, mod_is_vnd, mod_idx, base_mod_elem_idx, base_mod_is_vnd, base_mod_idx):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.BT_MESH_MODEL_EXTEND_WRAPPER_ID,
                sequence=request.sequence))
        if mod_elem_idx is None:
            raise ValueError("mod_elem_idx is None")
        codec.write_uint16(mod_elem_idx)
        if mod_is_vnd is None:
            raise ValueError("mod_is_vnd is None")
        codec.write_uint8(mod_is_vnd)
        if mod_idx is None:
            raise ValueError("mod_idx is None")
        codec.write_uint16(mod_idx)
        if base_mod_elem_idx is None:
            raise ValueError("base_mod_elem_idx is None")
        codec.write_uint16(base_mod_elem_idx)
        if base_mod_is_vnd is None:
            raise ValueError("base_mod_is_vnd is None")
        codec.write_uint8(base_mod_is_vnd)
        if base_mod_idx is None:
            raise ValueError("base_mod_idx is None")
        codec.write_uint16(base_mod_idx)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def bt_mesh_fault_update_wrapper(self, elem_idx):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.BT_MESH_FAULT_UPDATE_WRAPPER_ID,
                sequence=request.sequence))
        if elem_idx is None:
            raise ValueError("elem_idx is None")
        codec.write_uint16(elem_idx)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def settings_load_wrapper(self):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.SETTINGS_LOAD_WRAPPER_ID,
                sequence=request.sequence))

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def store_data_wrapper(self, elem_index, is_vnd, model_index, name, data):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.STORE_DATA_WRAPPER_ID,
                sequence=request.sequence))
        if elem_index is None:
            raise ValueError("elem_index is None")
        codec.write_uint16(elem_index)
        if is_vnd is None:
            raise ValueError("is_vnd is None")
        codec.write_uint8(is_vnd)
        if model_index is None:
            raise ValueError("model_index is None")
        codec.write_uint16(model_index)
        if name is None:
            raise ValueError("name is None")
        codec.write_string(name)
        if data is None:
            raise ValueError("data is None")
        codec.start_write_list(len(data))
        for _i0 in data:
            codec.write_uint8(_i0)


        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result



