#
# Generated by erpcgen 1.7.4 on Thu Jun  3 17:44:56 2021.
#
# AUTOGENERATED - DO NOT EDIT
#

import erpc
from . import common, interface

# Client for BLEmesh_api
class BLEmesh_apiService(erpc.server.Service):
    def __init__(self, handler):
        super(BLEmesh_apiService, self).__init__(interface.IBLEmesh_api.SERVICE_ID)
        self._handler = handler
        self._methods = {
                interface.IBLEmesh_api.MESH_INIT_ID: self._handle_mesh_init,
                interface.IBLEmesh_api.BT_MESH_INIT_PROV_RAW_INIT_ID: self._handle_bt_mesh_init_prov_raw_init,
                interface.IBLEmesh_api.BT_MESH_INIT_COMP_RAW_INIT_ID: self._handle_bt_mesh_init_comp_raw_init,
                interface.IBLEmesh_api.BT_MESH_INIT_ELEM_RAW_INIT_ID: self._handle_bt_mesh_init_elem_raw_init,
                interface.IBLEmesh_api.BT_MESH_CFG_CLI_RAW_INIT_ID: self._handle_bt_mesh_cfg_cli_raw_init,
                interface.IBLEmesh_api.BT_MESH_INIT_MODEL_RAW_INIT_ID: self._handle_bt_mesh_init_model_raw_init,
                interface.IBLEmesh_api.BT_MESH_CFG_SRV_RAW_INIT_ID: self._handle_bt_mesh_cfg_srv_raw_init,
                interface.IBLEmesh_api.BT_MESH_HEALTH_SRV_RAW_INIT_ID: self._handle_bt_mesh_health_srv_raw_init,
                interface.IBLEmesh_api.BT_MESH_RESET_ID: self._handle_bt_mesh_reset,
                interface.IBLEmesh_api.BT_MESH_SUSPEND_ID: self._handle_bt_mesh_suspend,
                interface.IBLEmesh_api.BT_MESH_RESUME_ID: self._handle_bt_mesh_resume,
                interface.IBLEmesh_api.BT_MESH_IV_UPDATE_TEST_ID: self._handle_bt_mesh_iv_update_test,
                interface.IBLEmesh_api.BT_MESH_IV_UPDATE_ID: self._handle_bt_mesh_iv_update,
                interface.IBLEmesh_api.BT_MESH_LPN_SET_ID: self._handle_bt_mesh_lpn_set,
                interface.IBLEmesh_api.BT_MESH_LPN_POLL_ID: self._handle_bt_mesh_lpn_poll,
                interface.IBLEmesh_api.BT_MESH_INPUT_STRING_ID: self._handle_bt_mesh_input_string,
                interface.IBLEmesh_api.BT_MESH_INPUT_NUMBER_ID: self._handle_bt_mesh_input_number,
                interface.IBLEmesh_api.BT_MESH_PROV_ENABLE_WRAPPER_ID: self._handle_bt_mesh_prov_enable_wrapper,
                interface.IBLEmesh_api.BT_MESH_PROV_DISABLE_WRAPPER_ID: self._handle_bt_mesh_prov_disable_wrapper,
                interface.IBLEmesh_api.BT_MESH_PROVISION_ID: self._handle_bt_mesh_provision,
                interface.IBLEmesh_api.BT_MESH_CFG_APP_KEY_ADD_WRAPPER_ID: self._handle_bt_mesh_cfg_app_key_add_wrapper,
                interface.IBLEmesh_api.BT_MESH_CFG_MOD_APP_BIND_VND_WRAPPER_ID: self._handle_bt_mesh_cfg_mod_app_bind_vnd_wrapper,
                interface.IBLEmesh_api.BT_MESH_CFG_MOD_APP_BIND_WRAPPER_ID: self._handle_bt_mesh_cfg_mod_app_bind_wrapper,
                interface.IBLEmesh_api.BT_MESH_CFG_MOD_SUB_ADD_VND_WRAPPER_ID: self._handle_bt_mesh_cfg_mod_sub_add_vnd_wrapper,
                interface.IBLEmesh_api.BT_MESH_CFG_MOD_SUB_ADD_WRAPPER_ID: self._handle_bt_mesh_cfg_mod_sub_add_wrapper,
                interface.IBLEmesh_api.BT_MESH_CFG_MOD_SUB_DEL_WRAPPER_ID: self._handle_bt_mesh_cfg_mod_sub_del_wrapper,
                interface.IBLEmesh_api.BT_MESH_CFG_MOD_SUB_DEL_VND_WRAPPER_ID: self._handle_bt_mesh_cfg_mod_sub_del_vnd_wrapper,
                interface.IBLEmesh_api.BT_MESH_CFG_MOD_SUB_VA_ADD_WRAPPER_ID: self._handle_bt_mesh_cfg_mod_sub_va_add_wrapper,
                interface.IBLEmesh_api.BT_MESH_CFG_MOD_SUB_VA_ADD_VND_WRAPPER_ID: self._handle_bt_mesh_cfg_mod_sub_va_add_vnd_wrapper,
                interface.IBLEmesh_api.BT_MESH_CFG_MOD_PUB_SET_WRAPPER_ID: self._handle_bt_mesh_cfg_mod_pub_set_wrapper,
                interface.IBLEmesh_api.BT_MESH_CFG_MOD_PUB_SET_VND_WRAPPER_ID: self._handle_bt_mesh_cfg_mod_pub_set_vnd_wrapper,
                interface.IBLEmesh_api.BT_MESH_IS_PROVISIONED_ID: self._handle_bt_mesh_is_provisioned,
                interface.IBLEmesh_api.BT_MESH_PROXY_IDENTITY_ENABLE_ID: self._handle_bt_mesh_proxy_identity_enable,
                interface.IBLEmesh_api.BT_MESH_MODEL_PUBLISH_WRAPPER_ID: self._handle_bt_mesh_model_publish_wrapper,
                interface.IBLEmesh_api.BT_MESH_MODEL_SEND_DATA_WRAPPER_ID: self._handle_bt_mesh_model_send_data_wrapper,
                interface.IBLEmesh_api.BT_MESH_MODEL_FIND_WRAPPER_ID: self._handle_bt_mesh_model_find_wrapper,
                interface.IBLEmesh_api.BT_MESH_MODEL_FIND_VND_WRAPPER_ID: self._handle_bt_mesh_model_find_vnd_wrapper,
                interface.IBLEmesh_api.BT_MESH_MODEL_EXTEND_WRAPPER_ID: self._handle_bt_mesh_model_extend_wrapper,
                interface.IBLEmesh_api.BT_MESH_FAULT_UPDATE_WRAPPER_ID: self._handle_bt_mesh_fault_update_wrapper,
                interface.IBLEmesh_api.SETTINGS_LOAD_WRAPPER_ID: self._handle_settings_load_wrapper,
                interface.IBLEmesh_api.STORE_DATA_WRAPPER_ID: self._handle_store_data_wrapper,
            }

    def _handle_mesh_init(self, sequence, codec):
        # Read incoming parameters.

        # Invoke user implementation of remote function.
        _result = self._handler.mesh_init()

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IBLEmesh_api.SERVICE_ID,
            request=interface.IBLEmesh_api.MESH_INIT_ID,
            sequence=sequence))
        codec.write_int32(_result)

    def _handle_bt_mesh_init_prov_raw_init(self, sequence, codec):
        # Read incoming parameters.
        prov_raw = common.bt_mesh_prov_raw()._read(codec)

        # Invoke user implementation of remote function.
        _result = self._handler.bt_mesh_init_prov_raw_init(prov_raw)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IBLEmesh_api.SERVICE_ID,
            request=interface.IBLEmesh_api.BT_MESH_INIT_PROV_RAW_INIT_ID,
            sequence=sequence))
        codec.write_int32(_result)

    def _handle_bt_mesh_init_comp_raw_init(self, sequence, codec):
        # Read incoming parameters.
        comp_raw = common.bt_mesh_comp_raw()._read(codec)

        # Invoke user implementation of remote function.
        _result = self._handler.bt_mesh_init_comp_raw_init(comp_raw)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IBLEmesh_api.SERVICE_ID,
            request=interface.IBLEmesh_api.BT_MESH_INIT_COMP_RAW_INIT_ID,
            sequence=sequence))
        codec.write_int32(_result)

    def _handle_bt_mesh_init_elem_raw_init(self, sequence, codec):
        # Read incoming parameters.
        elem_index = codec.read_uint16()
        elem_raw = common.bt_mesh_elem_raw()._read(codec)

        # Invoke user implementation of remote function.
        _result = self._handler.bt_mesh_init_elem_raw_init(elem_index, elem_raw)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IBLEmesh_api.SERVICE_ID,
            request=interface.IBLEmesh_api.BT_MESH_INIT_ELEM_RAW_INIT_ID,
            sequence=sequence))
        codec.write_int32(_result)

    def _handle_bt_mesh_cfg_cli_raw_init(self, sequence, codec):
        # Read incoming parameters.
        elem_index = codec.read_uint16()
        model_index = codec.read_uint16()

        # Invoke user implementation of remote function.
        _result = self._handler.bt_mesh_cfg_cli_raw_init(elem_index, model_index)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IBLEmesh_api.SERVICE_ID,
            request=interface.IBLEmesh_api.BT_MESH_CFG_CLI_RAW_INIT_ID,
            sequence=sequence))
        codec.write_int32(_result)

    def _handle_bt_mesh_init_model_raw_init(self, sequence, codec):
        # Read incoming parameters.
        elem_index = codec.read_uint16()
        model_index = codec.read_uint16()
        model_raw = common.bt_mesh_model_raw()._read(codec)
        _n0 = codec.start_read_list()
        op_raw = []
        for _i0 in range(_n0):
            _v0 = common.bt_mesh_model_op_raw()._read(codec)
            op_raw.append(_v0)


        # Invoke user implementation of remote function.
        _result = self._handler.bt_mesh_init_model_raw_init(elem_index, model_index, model_raw, op_raw)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IBLEmesh_api.SERVICE_ID,
            request=interface.IBLEmesh_api.BT_MESH_INIT_MODEL_RAW_INIT_ID,
            sequence=sequence))
        codec.write_int32(_result)

    def _handle_bt_mesh_cfg_srv_raw_init(self, sequence, codec):
        # Read incoming parameters.
        elem_index = codec.read_uint16()

        # Invoke user implementation of remote function.
        _result = self._handler.bt_mesh_cfg_srv_raw_init(elem_index)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IBLEmesh_api.SERVICE_ID,
            request=interface.IBLEmesh_api.BT_MESH_CFG_SRV_RAW_INIT_ID,
            sequence=sequence))
        codec.write_int32(_result)

    def _handle_bt_mesh_health_srv_raw_init(self, sequence, codec):
        # Read incoming parameters.
        elem_index = codec.read_uint16()
        model_index = codec.read_uint16()
        health_srv = common.bt_mesh_health_srv_raw()._read(codec)
        max_faults = codec.read_uint8()

        # Invoke user implementation of remote function.
        _result = self._handler.bt_mesh_health_srv_raw_init(elem_index, model_index, health_srv, max_faults)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IBLEmesh_api.SERVICE_ID,
            request=interface.IBLEmesh_api.BT_MESH_HEALTH_SRV_RAW_INIT_ID,
            sequence=sequence))
        codec.write_int32(_result)

    def _handle_bt_mesh_reset(self, sequence, codec):
        # Read incoming parameters.

        # Invoke user implementation of remote function.
        self._handler.bt_mesh_reset()

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IBLEmesh_api.SERVICE_ID,
            request=interface.IBLEmesh_api.BT_MESH_RESET_ID,
            sequence=sequence))

    def _handle_bt_mesh_suspend(self, sequence, codec):
        # Read incoming parameters.

        # Invoke user implementation of remote function.
        _result = self._handler.bt_mesh_suspend()

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IBLEmesh_api.SERVICE_ID,
            request=interface.IBLEmesh_api.BT_MESH_SUSPEND_ID,
            sequence=sequence))
        codec.write_int32(_result)

    def _handle_bt_mesh_resume(self, sequence, codec):
        # Read incoming parameters.

        # Invoke user implementation of remote function.
        _result = self._handler.bt_mesh_resume()

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IBLEmesh_api.SERVICE_ID,
            request=interface.IBLEmesh_api.BT_MESH_RESUME_ID,
            sequence=sequence))
        codec.write_int32(_result)

    def _handle_bt_mesh_iv_update_test(self, sequence, codec):
        # Read incoming parameters.
        enable = codec.read_bool()

        # Invoke user implementation of remote function.
        self._handler.bt_mesh_iv_update_test(enable)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IBLEmesh_api.SERVICE_ID,
            request=interface.IBLEmesh_api.BT_MESH_IV_UPDATE_TEST_ID,
            sequence=sequence))

    def _handle_bt_mesh_iv_update(self, sequence, codec):
        # Read incoming parameters.

        # Invoke user implementation of remote function.
        _result = self._handler.bt_mesh_iv_update()

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IBLEmesh_api.SERVICE_ID,
            request=interface.IBLEmesh_api.BT_MESH_IV_UPDATE_ID,
            sequence=sequence))
        codec.write_bool(_result)

    def _handle_bt_mesh_lpn_set(self, sequence, codec):
        # Read incoming parameters.
        enable = codec.read_bool()

        # Invoke user implementation of remote function.
        _result = self._handler.bt_mesh_lpn_set(enable)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IBLEmesh_api.SERVICE_ID,
            request=interface.IBLEmesh_api.BT_MESH_LPN_SET_ID,
            sequence=sequence))
        codec.write_int32(_result)

    def _handle_bt_mesh_lpn_poll(self, sequence, codec):
        # Read incoming parameters.

        # Invoke user implementation of remote function.
        _result = self._handler.bt_mesh_lpn_poll()

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IBLEmesh_api.SERVICE_ID,
            request=interface.IBLEmesh_api.BT_MESH_LPN_POLL_ID,
            sequence=sequence))
        codec.write_int32(_result)

    def _handle_bt_mesh_input_string(self, sequence, codec):
        # Read incoming parameters.
        str = codec.read_string()

        # Invoke user implementation of remote function.
        _result = self._handler.bt_mesh_input_string(str)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IBLEmesh_api.SERVICE_ID,
            request=interface.IBLEmesh_api.BT_MESH_INPUT_STRING_ID,
            sequence=sequence))
        codec.write_int32(_result)

    def _handle_bt_mesh_input_number(self, sequence, codec):
        # Read incoming parameters.
        num = codec.read_uint32()

        # Invoke user implementation of remote function.
        _result = self._handler.bt_mesh_input_number(num)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IBLEmesh_api.SERVICE_ID,
            request=interface.IBLEmesh_api.BT_MESH_INPUT_NUMBER_ID,
            sequence=sequence))
        codec.write_int32(_result)

    def _handle_bt_mesh_prov_enable_wrapper(self, sequence, codec):
        # Read incoming parameters.
        bearers = codec.read_uint32()

        # Invoke user implementation of remote function.
        _result = self._handler.bt_mesh_prov_enable_wrapper(bearers)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IBLEmesh_api.SERVICE_ID,
            request=interface.IBLEmesh_api.BT_MESH_PROV_ENABLE_WRAPPER_ID,
            sequence=sequence))
        codec.write_int32(_result)

    def _handle_bt_mesh_prov_disable_wrapper(self, sequence, codec):
        # Read incoming parameters.
        bearers = codec.read_uint32()

        # Invoke user implementation of remote function.
        _result = self._handler.bt_mesh_prov_disable_wrapper(bearers)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IBLEmesh_api.SERVICE_ID,
            request=interface.IBLEmesh_api.BT_MESH_PROV_DISABLE_WRAPPER_ID,
            sequence=sequence))
        codec.write_int32(_result)

    def _handle_bt_mesh_provision(self, sequence, codec):
        # Read incoming parameters.
        net_key = []
        for _i0 in range(16):
            _v0 = codec.read_uint8()
            net_key.append(_v0)

        net_idx = codec.read_uint16()
        flags = codec.read_uint8()
        iv_index = codec.read_uint32()
        addr = codec.read_uint16()
        dev_key = []
        for _i0 in range(16):
            _v0 = codec.read_uint8()
            dev_key.append(_v0)


        # Invoke user implementation of remote function.
        _result = self._handler.bt_mesh_provision(net_key, net_idx, flags, iv_index, addr, dev_key)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IBLEmesh_api.SERVICE_ID,
            request=interface.IBLEmesh_api.BT_MESH_PROVISION_ID,
            sequence=sequence))
        codec.write_int32(_result)

    def _handle_bt_mesh_cfg_app_key_add_wrapper(self, sequence, codec):
        # Read incoming parameters.
        net_idx = codec.read_uint16()
        addr = codec.read_uint16()
        key_net_idx = codec.read_uint16()
        key_app_idx = codec.read_uint16()
        app_key = []
        for _i0 in range(16):
            _v0 = codec.read_uint8()
            app_key.append(_v0)


        # Invoke user implementation of remote function.
        _result = self._handler.bt_mesh_cfg_app_key_add_wrapper(net_idx, addr, key_net_idx, key_app_idx, app_key)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IBLEmesh_api.SERVICE_ID,
            request=interface.IBLEmesh_api.BT_MESH_CFG_APP_KEY_ADD_WRAPPER_ID,
            sequence=sequence))
        codec.write_int32(_result)

    def _handle_bt_mesh_cfg_mod_app_bind_vnd_wrapper(self, sequence, codec):
        # Read incoming parameters.
        net_idx = codec.read_uint16()
        addr = codec.read_uint16()
        elem_addr = codec.read_uint16()
        mod_app_idx = codec.read_uint16()
        mod_id = codec.read_uint16()
        cid = codec.read_uint16()

        # Invoke user implementation of remote function.
        _result = self._handler.bt_mesh_cfg_mod_app_bind_vnd_wrapper(net_idx, addr, elem_addr, mod_app_idx, mod_id, cid)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IBLEmesh_api.SERVICE_ID,
            request=interface.IBLEmesh_api.BT_MESH_CFG_MOD_APP_BIND_VND_WRAPPER_ID,
            sequence=sequence))
        codec.write_int32(_result)

    def _handle_bt_mesh_cfg_mod_app_bind_wrapper(self, sequence, codec):
        # Read incoming parameters.
        net_idx = codec.read_uint16()
        addr = codec.read_uint16()
        elem_addr = codec.read_uint16()
        mod_app_idx = codec.read_uint16()
        mod_id = codec.read_uint16()

        # Invoke user implementation of remote function.
        _result = self._handler.bt_mesh_cfg_mod_app_bind_wrapper(net_idx, addr, elem_addr, mod_app_idx, mod_id)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IBLEmesh_api.SERVICE_ID,
            request=interface.IBLEmesh_api.BT_MESH_CFG_MOD_APP_BIND_WRAPPER_ID,
            sequence=sequence))
        codec.write_int32(_result)

    def _handle_bt_mesh_cfg_mod_sub_add_vnd_wrapper(self, sequence, codec):
        # Read incoming parameters.
        net_idx = codec.read_uint16()
        addr = codec.read_uint16()
        elem_addr = codec.read_uint16()
        sub_addr = codec.read_uint16()
        mod_id = codec.read_uint16()
        cid = codec.read_uint16()

        # Invoke user implementation of remote function.
        _result = self._handler.bt_mesh_cfg_mod_sub_add_vnd_wrapper(net_idx, addr, elem_addr, sub_addr, mod_id, cid)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IBLEmesh_api.SERVICE_ID,
            request=interface.IBLEmesh_api.BT_MESH_CFG_MOD_SUB_ADD_VND_WRAPPER_ID,
            sequence=sequence))
        codec.write_int32(_result)

    def _handle_bt_mesh_cfg_mod_sub_add_wrapper(self, sequence, codec):
        # Read incoming parameters.
        net_idx = codec.read_uint16()
        addr = codec.read_uint16()
        elem_addr = codec.read_uint16()
        sub_addr = codec.read_uint16()
        mod_id = codec.read_uint16()

        # Invoke user implementation of remote function.
        _result = self._handler.bt_mesh_cfg_mod_sub_add_wrapper(net_idx, addr, elem_addr, sub_addr, mod_id)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IBLEmesh_api.SERVICE_ID,
            request=interface.IBLEmesh_api.BT_MESH_CFG_MOD_SUB_ADD_WRAPPER_ID,
            sequence=sequence))
        codec.write_int32(_result)

    def _handle_bt_mesh_cfg_mod_sub_del_wrapper(self, sequence, codec):
        # Read incoming parameters.
        net_idx = codec.read_uint16()
        addr = codec.read_uint16()
        elem_addr = codec.read_uint16()
        sub_addr = codec.read_uint16()
        mod_id = codec.read_uint16()

        # Invoke user implementation of remote function.
        _result = self._handler.bt_mesh_cfg_mod_sub_del_wrapper(net_idx, addr, elem_addr, sub_addr, mod_id)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IBLEmesh_api.SERVICE_ID,
            request=interface.IBLEmesh_api.BT_MESH_CFG_MOD_SUB_DEL_WRAPPER_ID,
            sequence=sequence))
        codec.write_int32(_result)

    def _handle_bt_mesh_cfg_mod_sub_del_vnd_wrapper(self, sequence, codec):
        # Read incoming parameters.
        net_idx = codec.read_uint16()
        addr = codec.read_uint16()
        elem_addr = codec.read_uint16()
        sub_addr = codec.read_uint16()
        mod_id = codec.read_uint16()
        cid = codec.read_uint16()

        # Invoke user implementation of remote function.
        _result = self._handler.bt_mesh_cfg_mod_sub_del_vnd_wrapper(net_idx, addr, elem_addr, sub_addr, mod_id, cid)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IBLEmesh_api.SERVICE_ID,
            request=interface.IBLEmesh_api.BT_MESH_CFG_MOD_SUB_DEL_VND_WRAPPER_ID,
            sequence=sequence))
        codec.write_int32(_result)

    def _handle_bt_mesh_cfg_mod_sub_va_add_wrapper(self, sequence, codec):
        # Read incoming parameters.
        net_idx = codec.read_uint16()
        addr = codec.read_uint16()
        elem_addr = codec.read_uint16()
        label = []
        for _i0 in range(16):
            _v0 = codec.read_uint8()
            label.append(_v0)

        mod_id = codec.read_uint16()

        # Invoke user implementation of remote function.
        _result = self._handler.bt_mesh_cfg_mod_sub_va_add_wrapper(net_idx, addr, elem_addr, label, mod_id)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IBLEmesh_api.SERVICE_ID,
            request=interface.IBLEmesh_api.BT_MESH_CFG_MOD_SUB_VA_ADD_WRAPPER_ID,
            sequence=sequence))
        codec.write_int32(_result)

    def _handle_bt_mesh_cfg_mod_sub_va_add_vnd_wrapper(self, sequence, codec):
        # Read incoming parameters.
        net_idx = codec.read_uint16()
        addr = codec.read_uint16()
        elem_addr = codec.read_uint16()
        label = []
        for _i0 in range(16):
            _v0 = codec.read_uint8()
            label.append(_v0)

        mod_id = codec.read_uint16()
        cid = codec.read_uint16()

        # Invoke user implementation of remote function.
        _result = self._handler.bt_mesh_cfg_mod_sub_va_add_vnd_wrapper(net_idx, addr, elem_addr, label, mod_id, cid)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IBLEmesh_api.SERVICE_ID,
            request=interface.IBLEmesh_api.BT_MESH_CFG_MOD_SUB_VA_ADD_VND_WRAPPER_ID,
            sequence=sequence))
        codec.write_int32(_result)

    def _handle_bt_mesh_cfg_mod_pub_set_wrapper(self, sequence, codec):
        # Read incoming parameters.
        net_idx = codec.read_uint16()
        addr = codec.read_uint16()
        elem_addr = codec.read_uint16()
        mod_id = codec.read_uint16()
        pub = common.bt_mesh_cfg_mod_pub_raw()._read(codec)

        # Invoke user implementation of remote function.
        _result = self._handler.bt_mesh_cfg_mod_pub_set_wrapper(net_idx, addr, elem_addr, mod_id, pub)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IBLEmesh_api.SERVICE_ID,
            request=interface.IBLEmesh_api.BT_MESH_CFG_MOD_PUB_SET_WRAPPER_ID,
            sequence=sequence))
        codec.write_int32(_result)

    def _handle_bt_mesh_cfg_mod_pub_set_vnd_wrapper(self, sequence, codec):
        # Read incoming parameters.
        net_idx = codec.read_uint16()
        addr = codec.read_uint16()
        elem_addr = codec.read_uint16()
        mod_id = codec.read_uint16()
        cid = codec.read_uint16()
        pub = common.bt_mesh_cfg_mod_pub_raw()._read(codec)

        # Invoke user implementation of remote function.
        _result = self._handler.bt_mesh_cfg_mod_pub_set_vnd_wrapper(net_idx, addr, elem_addr, mod_id, cid, pub)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IBLEmesh_api.SERVICE_ID,
            request=interface.IBLEmesh_api.BT_MESH_CFG_MOD_PUB_SET_VND_WRAPPER_ID,
            sequence=sequence))
        codec.write_int32(_result)

    def _handle_bt_mesh_is_provisioned(self, sequence, codec):
        # Read incoming parameters.

        # Invoke user implementation of remote function.
        _result = self._handler.bt_mesh_is_provisioned()

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IBLEmesh_api.SERVICE_ID,
            request=interface.IBLEmesh_api.BT_MESH_IS_PROVISIONED_ID,
            sequence=sequence))
        codec.write_bool(_result)

    def _handle_bt_mesh_proxy_identity_enable(self, sequence, codec):
        # Read incoming parameters.

        # Invoke user implementation of remote function.
        _result = self._handler.bt_mesh_proxy_identity_enable()

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IBLEmesh_api.SERVICE_ID,
            request=interface.IBLEmesh_api.BT_MESH_PROXY_IDENTITY_ENABLE_ID,
            sequence=sequence))
        codec.write_int32(_result)

    def _handle_bt_mesh_model_publish_wrapper(self, sequence, codec):
        # Read incoming parameters.
        elem_idx = codec.read_uint16()
        is_vnd = codec.read_uint8()
        model_index = codec.read_uint16()
        msg = common.net_buf_simple_raw()._read(codec)

        # Invoke user implementation of remote function.
        _result = self._handler.bt_mesh_model_publish_wrapper(elem_idx, is_vnd, model_index, msg)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IBLEmesh_api.SERVICE_ID,
            request=interface.IBLEmesh_api.BT_MESH_MODEL_PUBLISH_WRAPPER_ID,
            sequence=sequence))
        codec.write_int32(_result)

    def _handle_bt_mesh_model_send_data_wrapper(self, sequence, codec):
        # Read incoming parameters.
        elem_idx = codec.read_uint16()
        is_vnd = codec.read_uint8()
        model_index = codec.read_uint16()
        ctx = common.bt_mesh_msg_ctx_raw()._read(codec)
        msg = common.net_buf_simple_raw()._read(codec)

        # Invoke user implementation of remote function.
        _result = self._handler.bt_mesh_model_send_data_wrapper(elem_idx, is_vnd, model_index, ctx, msg)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IBLEmesh_api.SERVICE_ID,
            request=interface.IBLEmesh_api.BT_MESH_MODEL_SEND_DATA_WRAPPER_ID,
            sequence=sequence))
        codec.write_int32(_result)

    def _handle_bt_mesh_model_find_wrapper(self, sequence, codec):
        # Read incoming parameters.
        elem_idx = codec.read_uint16()
        id = codec.read_uint16()

        # Invoke user implementation of remote function.
        _result = self._handler.bt_mesh_model_find_wrapper(elem_idx, id)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IBLEmesh_api.SERVICE_ID,
            request=interface.IBLEmesh_api.BT_MESH_MODEL_FIND_WRAPPER_ID,
            sequence=sequence))
        codec.write_int32(_result)

    def _handle_bt_mesh_model_find_vnd_wrapper(self, sequence, codec):
        # Read incoming parameters.
        elem_idx = codec.read_uint16()
        company = codec.read_uint16()
        id = codec.read_uint16()

        # Invoke user implementation of remote function.
        _result = self._handler.bt_mesh_model_find_vnd_wrapper(elem_idx, company, id)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IBLEmesh_api.SERVICE_ID,
            request=interface.IBLEmesh_api.BT_MESH_MODEL_FIND_VND_WRAPPER_ID,
            sequence=sequence))
        codec.write_int32(_result)

    def _handle_bt_mesh_model_extend_wrapper(self, sequence, codec):
        # Read incoming parameters.
        mod_elem_idx = codec.read_uint16()
        mod_is_vnd = codec.read_uint8()
        mod_idx = codec.read_uint16()
        base_mod_elem_idx = codec.read_uint16()
        base_mod_is_vnd = codec.read_uint8()
        base_mod_idx = codec.read_uint16()

        # Invoke user implementation of remote function.
        _result = self._handler.bt_mesh_model_extend_wrapper(mod_elem_idx, mod_is_vnd, mod_idx, base_mod_elem_idx, base_mod_is_vnd, base_mod_idx)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IBLEmesh_api.SERVICE_ID,
            request=interface.IBLEmesh_api.BT_MESH_MODEL_EXTEND_WRAPPER_ID,
            sequence=sequence))
        codec.write_int32(_result)

    def _handle_bt_mesh_fault_update_wrapper(self, sequence, codec):
        # Read incoming parameters.
        elem_idx = codec.read_uint16()

        # Invoke user implementation of remote function.
        _result = self._handler.bt_mesh_fault_update_wrapper(elem_idx)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IBLEmesh_api.SERVICE_ID,
            request=interface.IBLEmesh_api.BT_MESH_FAULT_UPDATE_WRAPPER_ID,
            sequence=sequence))
        codec.write_int32(_result)

    def _handle_settings_load_wrapper(self, sequence, codec):
        # Read incoming parameters.

        # Invoke user implementation of remote function.
        _result = self._handler.settings_load_wrapper()

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IBLEmesh_api.SERVICE_ID,
            request=interface.IBLEmesh_api.SETTINGS_LOAD_WRAPPER_ID,
            sequence=sequence))
        codec.write_int32(_result)

    def _handle_store_data_wrapper(self, sequence, codec):
        # Read incoming parameters.
        elem_index = codec.read_uint16()
        is_vnd = codec.read_uint8()
        model_index = codec.read_uint16()
        name = codec.read_string()
        _n0 = codec.start_read_list()
        data = []
        for _i0 in range(_n0):
            _v0 = codec.read_uint8()
            data.append(_v0)


        # Invoke user implementation of remote function.
        _result = self._handler.store_data_wrapper(elem_index, is_vnd, model_index, name, data)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IBLEmesh_api.SERVICE_ID,
            request=interface.IBLEmesh_api.STORE_DATA_WRAPPER_ID,
            sequence=sequence))
        codec.write_int32(_result)


