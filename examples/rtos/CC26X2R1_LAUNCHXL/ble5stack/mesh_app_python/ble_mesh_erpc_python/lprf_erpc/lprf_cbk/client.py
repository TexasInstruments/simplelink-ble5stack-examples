#
# Generated by erpcgen 1.7.4 on Thu Jun  3 17:44:56 2021.
#
# AUTOGENERATED - DO NOT EDIT
#

import erpc
from . import common, interface

# Client for BLEmesh_cbk_access
class BLEmesh_cbk_accessClient(interface.IBLEmesh_cbk_access):
    def __init__(self, manager):
        super(BLEmesh_cbk_accessClient, self).__init__()
        self._clientManager = manager

    def start_cb(self, elem_idx, is_vnd, model_index):
        # Build remote function invocation message.
        request = self._clientManager.create_request(isOneway=True)
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kOnewayMessage,
                service=self.SERVICE_ID,
                request=self.START_CB_ID,
                sequence=request.sequence))
        if elem_idx is None:
            raise ValueError("elem_idx is None")
        codec.write_uint16(elem_idx)
        if is_vnd is None:
            raise ValueError("is_vnd is None")
        codec.write_uint8(is_vnd)
        if model_index is None:
            raise ValueError("model_index is None")
        codec.write_uint16(model_index)

        # Send request.
        self._clientManager.perform_request(request)

    def init_cb(self, elem_idx, is_vnd, model_index):
        # Build remote function invocation message.
        request = self._clientManager.create_request(isOneway=True)
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kOnewayMessage,
                service=self.SERVICE_ID,
                request=self.INIT_CB_ID,
                sequence=request.sequence))
        if elem_idx is None:
            raise ValueError("elem_idx is None")
        codec.write_uint16(elem_idx)
        if is_vnd is None:
            raise ValueError("is_vnd is None")
        codec.write_uint8(is_vnd)
        if model_index is None:
            raise ValueError("model_index is None")
        codec.write_uint16(model_index)

        # Send request.
        self._clientManager.perform_request(request)

    def reset_cb(self, elem_idx, is_vnd, model_index):
        # Build remote function invocation message.
        request = self._clientManager.create_request(isOneway=True)
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kOnewayMessage,
                service=self.SERVICE_ID,
                request=self.RESET_CB_ID,
                sequence=request.sequence))
        if elem_idx is None:
            raise ValueError("elem_idx is None")
        codec.write_uint16(elem_idx)
        if is_vnd is None:
            raise ValueError("is_vnd is None")
        codec.write_uint8(is_vnd)
        if model_index is None:
            raise ValueError("model_index is None")
        codec.write_uint16(model_index)

        # Send request.
        self._clientManager.perform_request(request)

    def settings_set_cb(self, elem_idx, is_vnd, model_index, name, data):
        # Build remote function invocation message.
        request = self._clientManager.create_request(isOneway=True)
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kOnewayMessage,
                service=self.SERVICE_ID,
                request=self.SETTINGS_SET_CB_ID,
                sequence=request.sequence))
        if elem_idx is None:
            raise ValueError("elem_idx is None")
        codec.write_uint16(elem_idx)
        if is_vnd is None:
            raise ValueError("is_vnd is None")
        codec.write_uint8(is_vnd)
        if model_index is None:
            raise ValueError("model_index is None")
        codec.write_uint16(model_index)
        if name is None:
            raise ValueError("name is None")
        codec.write_string(name)
        if data is None:
            raise ValueError("data is None")
        codec.start_write_list(len(data))
        for _i0 in data:
            codec.write_uint8(_i0)


        # Send request.
        self._clientManager.perform_request(request)

    def update_cb(self, elem_idx, is_vnd, model_index):
        # Build remote function invocation message.
        request = self._clientManager.create_request(isOneway=True)
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kOnewayMessage,
                service=self.SERVICE_ID,
                request=self.UPDATE_CB_ID,
                sequence=request.sequence))
        if elem_idx is None:
            raise ValueError("elem_idx is None")
        codec.write_uint16(elem_idx)
        if is_vnd is None:
            raise ValueError("is_vnd is None")
        codec.write_uint8(is_vnd)
        if model_index is None:
            raise ValueError("model_index is None")
        codec.write_uint16(model_index)

        # Send request.
        self._clientManager.perform_request(request)

    def func_cb(self, opcode, elem_idx, is_vnd, model_index, ctx, buf):
        # Build remote function invocation message.
        request = self._clientManager.create_request(isOneway=True)
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kOnewayMessage,
                service=self.SERVICE_ID,
                request=self.FUNC_CB_ID,
                sequence=request.sequence))
        if opcode is None:
            raise ValueError("opcode is None")
        codec.write_uint32(opcode)
        if elem_idx is None:
            raise ValueError("elem_idx is None")
        codec.write_uint16(elem_idx)
        if is_vnd is None:
            raise ValueError("is_vnd is None")
        codec.write_uint8(is_vnd)
        if model_index is None:
            raise ValueError("model_index is None")
        codec.write_uint16(model_index)
        if ctx is None:
            raise ValueError("ctx is None")
        codec.start_write_list(len(ctx))
        for _i0 in ctx:
            _i0._write(codec)

        if buf is None:
            raise ValueError("buf is None")
        codec.start_write_list(len(buf))
        for _i0 in buf:
            _i0._write(codec)


        # Send request.
        self._clientManager.perform_request(request)


# Client for BLEmesh_cbk_health_srv
class BLEmesh_cbk_health_srvClient(interface.IBLEmesh_cbk_health_srv):
    def __init__(self, manager):
        super(BLEmesh_cbk_health_srvClient, self).__init__()
        self._clientManager = manager

    def fault_get_cur_cb(self, elem_idx, model_index, test_id, company_id, faults):
        assert type(test_id) is erpc.Reference, "out parameter must be a Reference object"
        assert type(company_id) is erpc.Reference, "out parameter must be a Reference object"
        assert type(faults) is erpc.Reference, "out parameter must be a Reference object"

        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.FAULT_GET_CUR_CB_ID,
                sequence=request.sequence))
        if elem_idx is None:
            raise ValueError("elem_idx is None")
        codec.write_uint16(elem_idx)
        if model_index is None:
            raise ValueError("model_index is None")
        codec.write_uint16(model_index)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        test_id.value = codec.read_uint8()
        company_id.value = codec.read_uint16()
        _n0 = codec.start_read_list()
        faults.value = []
        for _i0 in range(_n0):
            _v0 = codec.read_uint8()
            faults.value.append(_v0)

        _result = codec.read_int32()
        return _result

    def fault_get_reg_cb(self, elem_idx, model_index, company_id, test_id, faults):
        assert type(test_id) is erpc.Reference, "out parameter must be a Reference object"
        assert type(faults) is erpc.Reference, "out parameter must be a Reference object"

        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.FAULT_GET_REG_CB_ID,
                sequence=request.sequence))
        if elem_idx is None:
            raise ValueError("elem_idx is None")
        codec.write_uint16(elem_idx)
        if model_index is None:
            raise ValueError("model_index is None")
        codec.write_uint16(model_index)
        if company_id is None:
            raise ValueError("company_id is None")
        codec.write_uint16(company_id)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        test_id.value = codec.read_uint8()
        _n0 = codec.start_read_list()
        faults.value = []
        for _i0 in range(_n0):
            _v0 = codec.read_uint8()
            faults.value.append(_v0)

        _result = codec.read_int32()
        return _result

    def fault_clear_cb(self, elem_idx, model_index, company_id):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.FAULT_CLEAR_CB_ID,
                sequence=request.sequence))
        if elem_idx is None:
            raise ValueError("elem_idx is None")
        codec.write_uint16(elem_idx)
        if model_index is None:
            raise ValueError("model_index is None")
        codec.write_uint16(model_index)
        if company_id is None:
            raise ValueError("company_id is None")
        codec.write_uint16(company_id)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def fault_test_cb(self, elem_idx, model_index, test_id, company_id):
        # Build remote function invocation message.
        request = self._clientManager.create_request()
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kInvocationMessage,
                service=self.SERVICE_ID,
                request=self.FAULT_TEST_CB_ID,
                sequence=request.sequence))
        if elem_idx is None:
            raise ValueError("elem_idx is None")
        codec.write_uint16(elem_idx)
        if model_index is None:
            raise ValueError("model_index is None")
        codec.write_uint16(model_index)
        if test_id is None:
            raise ValueError("test_id is None")
        codec.write_uint8(test_id)
        if company_id is None:
            raise ValueError("company_id is None")
        codec.write_uint16(company_id)

        # Send request and process reply.
        self._clientManager.perform_request(request)
        _result = codec.read_int32()
        return _result

    def attn_on_cb(self, elem_idx, model_index):
        # Build remote function invocation message.
        request = self._clientManager.create_request(isOneway=True)
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kOnewayMessage,
                service=self.SERVICE_ID,
                request=self.ATTN_ON_CB_ID,
                sequence=request.sequence))
        if elem_idx is None:
            raise ValueError("elem_idx is None")
        codec.write_uint16(elem_idx)
        if model_index is None:
            raise ValueError("model_index is None")
        codec.write_uint16(model_index)

        # Send request.
        self._clientManager.perform_request(request)

    def attn_off_cb(self, elem_idx, model_index):
        # Build remote function invocation message.
        request = self._clientManager.create_request(isOneway=True)
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kOnewayMessage,
                service=self.SERVICE_ID,
                request=self.ATTN_OFF_CB_ID,
                sequence=request.sequence))
        if elem_idx is None:
            raise ValueError("elem_idx is None")
        codec.write_uint16(elem_idx)
        if model_index is None:
            raise ValueError("model_index is None")
        codec.write_uint16(model_index)

        # Send request.
        self._clientManager.perform_request(request)


# Client for BLEmesh_cbk
class BLEmesh_cbkClient(interface.IBLEmesh_cbk):
    def __init__(self, manager):
        super(BLEmesh_cbkClient, self).__init__()
        self._clientManager = manager

    def output_number_cb(self, act, num):
        # Build remote function invocation message.
        request = self._clientManager.create_request(isOneway=True)
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kOnewayMessage,
                service=self.SERVICE_ID,
                request=self.OUTPUT_NUMBER_CB_ID,
                sequence=request.sequence))
        if act is None:
            raise ValueError("act is None")
        codec.write_uint32(act)
        if num is None:
            raise ValueError("num is None")
        codec.write_uint32(num)

        # Send request.
        self._clientManager.perform_request(request)

    def output_string_cb(self, str):
        # Build remote function invocation message.
        request = self._clientManager.create_request(isOneway=True)
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kOnewayMessage,
                service=self.SERVICE_ID,
                request=self.OUTPUT_STRING_CB_ID,
                sequence=request.sequence))
        if str is None:
            raise ValueError("str is None")
        codec.write_string(str)

        # Send request.
        self._clientManager.perform_request(request)

    def input_cb(self, act, size):
        # Build remote function invocation message.
        request = self._clientManager.create_request(isOneway=True)
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kOnewayMessage,
                service=self.SERVICE_ID,
                request=self.INPUT_CB_ID,
                sequence=request.sequence))
        if act is None:
            raise ValueError("act is None")
        codec.write_uint32(act)
        if size is None:
            raise ValueError("size is None")
        codec.write_uint8(size)

        # Send request.
        self._clientManager.perform_request(request)

    def input_complete_cb(self):
        # Build remote function invocation message.
        request = self._clientManager.create_request(isOneway=True)
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kOnewayMessage,
                service=self.SERVICE_ID,
                request=self.INPUT_COMPLETE_CB_ID,
                sequence=request.sequence))

        # Send request.
        self._clientManager.perform_request(request)

    def unprovisioned_beacon_cb(self, uuid, oob_info, uri_hash):
        # Build remote function invocation message.
        request = self._clientManager.create_request(isOneway=True)
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kOnewayMessage,
                service=self.SERVICE_ID,
                request=self.UNPROVISIONED_BEACON_CB_ID,
                sequence=request.sequence))
        if uuid is None:
            raise ValueError("uuid is None")
        for _i0 in uuid:
            codec.write_uint8(_i0)

        if oob_info is None:
            raise ValueError("oob_info is None")
        codec.write_uint32(oob_info)
        if uri_hash is None:
            raise ValueError("uri_hash is None")
        codec.start_write_list(len(uri_hash))
        for _i0 in uri_hash:
            codec.write_uint32(_i0)


        # Send request.
        self._clientManager.perform_request(request)

    def link_open_cb(self, bearer):
        # Build remote function invocation message.
        request = self._clientManager.create_request(isOneway=True)
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kOnewayMessage,
                service=self.SERVICE_ID,
                request=self.LINK_OPEN_CB_ID,
                sequence=request.sequence))
        if bearer is None:
            raise ValueError("bearer is None")
        codec.write_uint32(bearer)

        # Send request.
        self._clientManager.perform_request(request)

    def link_close_cb(self, bearer):
        # Build remote function invocation message.
        request = self._clientManager.create_request(isOneway=True)
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kOnewayMessage,
                service=self.SERVICE_ID,
                request=self.LINK_CLOSE_CB_ID,
                sequence=request.sequence))
        if bearer is None:
            raise ValueError("bearer is None")
        codec.write_uint32(bearer)

        # Send request.
        self._clientManager.perform_request(request)

    def complete_cb(self, net_idx, addr):
        # Build remote function invocation message.
        request = self._clientManager.create_request(isOneway=True)
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kOnewayMessage,
                service=self.SERVICE_ID,
                request=self.COMPLETE_CB_ID,
                sequence=request.sequence))
        if net_idx is None:
            raise ValueError("net_idx is None")
        codec.write_uint16(net_idx)
        if addr is None:
            raise ValueError("addr is None")
        codec.write_uint16(addr)

        # Send request.
        self._clientManager.perform_request(request)

    def node_added_cb(self, net_idx, uuid, addr, num_elem):
        # Build remote function invocation message.
        request = self._clientManager.create_request(isOneway=True)
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kOnewayMessage,
                service=self.SERVICE_ID,
                request=self.NODE_ADDED_CB_ID,
                sequence=request.sequence))
        if net_idx is None:
            raise ValueError("net_idx is None")
        codec.write_uint16(net_idx)
        if uuid is None:
            raise ValueError("uuid is None")
        for _i0 in uuid:
            codec.write_uint8(_i0)

        if addr is None:
            raise ValueError("addr is None")
        codec.write_uint16(addr)
        if num_elem is None:
            raise ValueError("num_elem is None")
        codec.write_uint8(num_elem)

        # Send request.
        self._clientManager.perform_request(request)

    def reset_prov_cb(self):
        # Build remote function invocation message.
        request = self._clientManager.create_request(isOneway=True)
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kOnewayMessage,
                service=self.SERVICE_ID,
                request=self.RESET_PROV_CB_ID,
                sequence=request.sequence))

        # Send request.
        self._clientManager.perform_request(request)

    def hb_recv_cb(self, sub, hops, feat):
        # Build remote function invocation message.
        request = self._clientManager.create_request(isOneway=True)
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kOnewayMessage,
                service=self.SERVICE_ID,
                request=self.HB_RECV_CB_ID,
                sequence=request.sequence))
        if sub is None:
            raise ValueError("sub is None")
        sub._write(codec)
        if hops is None:
            raise ValueError("hops is None")
        codec.write_uint8(hops)
        if feat is None:
            raise ValueError("feat is None")
        codec.write_uint16(feat)

        # Send request.
        self._clientManager.perform_request(request)

    def hb_sub_end_cb(self, sub):
        # Build remote function invocation message.
        request = self._clientManager.create_request(isOneway=True)
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kOnewayMessage,
                service=self.SERVICE_ID,
                request=self.HB_SUB_END_CB_ID,
                sequence=request.sequence))
        if sub is None:
            raise ValueError("sub is None")
        sub._write(codec)

        # Send request.
        self._clientManager.perform_request(request)

    def lpn_friendship_established_cb(self, net_idx, friend_addr, queue_size, recv_window):
        # Build remote function invocation message.
        request = self._clientManager.create_request(isOneway=True)
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kOnewayMessage,
                service=self.SERVICE_ID,
                request=self.LPN_FRIENDSHIP_ESTABLISHED_CB_ID,
                sequence=request.sequence))
        if net_idx is None:
            raise ValueError("net_idx is None")
        codec.write_uint16(net_idx)
        if friend_addr is None:
            raise ValueError("friend_addr is None")
        codec.write_uint16(friend_addr)
        if queue_size is None:
            raise ValueError("queue_size is None")
        codec.write_uint8(queue_size)
        if recv_window is None:
            raise ValueError("recv_window is None")
        codec.write_uint8(recv_window)

        # Send request.
        self._clientManager.perform_request(request)

    def lpn_friendship_terminated_cb(self, net_idx, friend_addr):
        # Build remote function invocation message.
        request = self._clientManager.create_request(isOneway=True)
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kOnewayMessage,
                service=self.SERVICE_ID,
                request=self.LPN_FRIENDSHIP_TERMINATED_CB_ID,
                sequence=request.sequence))
        if net_idx is None:
            raise ValueError("net_idx is None")
        codec.write_uint16(net_idx)
        if friend_addr is None:
            raise ValueError("friend_addr is None")
        codec.write_uint16(friend_addr)

        # Send request.
        self._clientManager.perform_request(request)

    def lpn_polled_cb(self, net_idx, friend_addr, retry):
        # Build remote function invocation message.
        request = self._clientManager.create_request(isOneway=True)
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kOnewayMessage,
                service=self.SERVICE_ID,
                request=self.LPN_POLLED_CB_ID,
                sequence=request.sequence))
        if net_idx is None:
            raise ValueError("net_idx is None")
        codec.write_uint16(net_idx)
        if friend_addr is None:
            raise ValueError("friend_addr is None")
        codec.write_uint16(friend_addr)
        if retry is None:
            raise ValueError("retry is None")
        codec.write_bool(retry)

        # Send request.
        self._clientManager.perform_request(request)

    def friend_friendship_established_cb(self, net_idx, lpn_addr, recv_delay, polltimeout):
        # Build remote function invocation message.
        request = self._clientManager.create_request(isOneway=True)
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kOnewayMessage,
                service=self.SERVICE_ID,
                request=self.FRIEND_FRIENDSHIP_ESTABLISHED_CB_ID,
                sequence=request.sequence))
        if net_idx is None:
            raise ValueError("net_idx is None")
        codec.write_uint16(net_idx)
        if lpn_addr is None:
            raise ValueError("lpn_addr is None")
        codec.write_uint16(lpn_addr)
        if recv_delay is None:
            raise ValueError("recv_delay is None")
        codec.write_uint8(recv_delay)
        if polltimeout is None:
            raise ValueError("polltimeout is None")
        codec.write_uint32(polltimeout)

        # Send request.
        self._clientManager.perform_request(request)

    def friend_friendship_terminated_cb(self, net_idx, lpn_addr):
        # Build remote function invocation message.
        request = self._clientManager.create_request(isOneway=True)
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kOnewayMessage,
                service=self.SERVICE_ID,
                request=self.FRIEND_FRIENDSHIP_TERMINATED_CB_ID,
                sequence=request.sequence))
        if net_idx is None:
            raise ValueError("net_idx is None")
        codec.write_uint16(net_idx)
        if lpn_addr is None:
            raise ValueError("lpn_addr is None")
        codec.write_uint16(lpn_addr)

        # Send request.
        self._clientManager.perform_request(request)

    def appkey_evt_cb(self, app_idx, net_idx, evt):
        # Build remote function invocation message.
        request = self._clientManager.create_request(isOneway=True)
        codec = request.codec
        codec.start_write_message(erpc.codec.MessageInfo(
                type=erpc.codec.MessageType.kOnewayMessage,
                service=self.SERVICE_ID,
                request=self.APPKEY_EVT_CB_ID,
                sequence=request.sequence))
        if app_idx is None:
            raise ValueError("app_idx is None")
        codec.write_uint16(app_idx)
        if net_idx is None:
            raise ValueError("net_idx is None")
        codec.write_uint16(net_idx)
        if evt is None:
            raise ValueError("evt is None")
        codec.write_uint32(evt)

        # Send request.
        self._clientManager.perform_request(request)



