#
# Generated by erpcgen 1.7.4 on Thu Jun  3 17:44:56 2021.
#
# AUTOGENERATED - DO NOT EDIT
#

import erpc
from . import common, interface

# Client for BLEmesh_cbk_access
class BLEmesh_cbk_accessService(erpc.server.Service):
    def __init__(self, handler):
        super(BLEmesh_cbk_accessService, self).__init__(interface.IBLEmesh_cbk_access.SERVICE_ID)
        self._handler = handler
        self._methods = {
                interface.IBLEmesh_cbk_access.START_CB_ID: self._handle_start_cb,
                interface.IBLEmesh_cbk_access.INIT_CB_ID: self._handle_init_cb,
                interface.IBLEmesh_cbk_access.RESET_CB_ID: self._handle_reset_cb,
                interface.IBLEmesh_cbk_access.SETTINGS_SET_CB_ID: self._handle_settings_set_cb,
                interface.IBLEmesh_cbk_access.UPDATE_CB_ID: self._handle_update_cb,
                interface.IBLEmesh_cbk_access.FUNC_CB_ID: self._handle_func_cb,
            }

    def _handle_start_cb(self, sequence, codec):
        # Read incoming parameters.
        elem_idx = codec.read_uint16()
        is_vnd = codec.read_uint8()
        model_index = codec.read_uint16()

        # Invoke user implementation of remote function.
        self._handler.start_cb(elem_idx, is_vnd, model_index)

    def _handle_init_cb(self, sequence, codec):
        # Read incoming parameters.
        elem_idx = codec.read_uint16()
        is_vnd = codec.read_uint8()
        model_index = codec.read_uint16()

        # Invoke user implementation of remote function.
        self._handler.init_cb(elem_idx, is_vnd, model_index)

    def _handle_reset_cb(self, sequence, codec):
        # Read incoming parameters.
        elem_idx = codec.read_uint16()
        is_vnd = codec.read_uint8()
        model_index = codec.read_uint16()

        # Invoke user implementation of remote function.
        self._handler.reset_cb(elem_idx, is_vnd, model_index)

    def _handle_settings_set_cb(self, sequence, codec):
        # Read incoming parameters.
        elem_idx = codec.read_uint16()
        is_vnd = codec.read_uint8()
        model_index = codec.read_uint16()
        name = codec.read_string()
        _n0 = codec.start_read_list()
        data = []
        for _i0 in range(_n0):
            _v0 = codec.read_uint8()
            data.append(_v0)


        # Invoke user implementation of remote function.
        self._handler.settings_set_cb(elem_idx, is_vnd, model_index, name, data)

    def _handle_update_cb(self, sequence, codec):
        # Read incoming parameters.
        elem_idx = codec.read_uint16()
        is_vnd = codec.read_uint8()
        model_index = codec.read_uint16()

        # Invoke user implementation of remote function.
        self._handler.update_cb(elem_idx, is_vnd, model_index)

    def _handle_func_cb(self, sequence, codec):
        # Read incoming parameters.
        opcode = codec.read_uint32()
        elem_idx = codec.read_uint16()
        is_vnd = codec.read_uint8()
        model_index = codec.read_uint16()
        _n0 = codec.start_read_list()
        ctx = []
        for _i0 in range(_n0):
            _v0 = common.bt_mesh_msg_ctx_raw()._read(codec)
            ctx.append(_v0)

        _n0 = codec.start_read_list()
        buf = []
        for _i0 in range(_n0):
            _v0 = common.net_buf_simple_raw()._read(codec)
            buf.append(_v0)


        # Invoke user implementation of remote function.
        self._handler.func_cb(opcode, elem_idx, is_vnd, model_index, ctx, buf)


# Client for BLEmesh_cbk_health_srv
class BLEmesh_cbk_health_srvService(erpc.server.Service):
    def __init__(self, handler):
        super(BLEmesh_cbk_health_srvService, self).__init__(interface.IBLEmesh_cbk_health_srv.SERVICE_ID)
        self._handler = handler
        self._methods = {
                interface.IBLEmesh_cbk_health_srv.FAULT_GET_CUR_CB_ID: self._handle_fault_get_cur_cb,
                interface.IBLEmesh_cbk_health_srv.FAULT_GET_REG_CB_ID: self._handle_fault_get_reg_cb,
                interface.IBLEmesh_cbk_health_srv.FAULT_CLEAR_CB_ID: self._handle_fault_clear_cb,
                interface.IBLEmesh_cbk_health_srv.FAULT_TEST_CB_ID: self._handle_fault_test_cb,
                interface.IBLEmesh_cbk_health_srv.ATTN_ON_CB_ID: self._handle_attn_on_cb,
                interface.IBLEmesh_cbk_health_srv.ATTN_OFF_CB_ID: self._handle_attn_off_cb,
            }

    def _handle_fault_get_cur_cb(self, sequence, codec):
        # Create reference objects to pass into handler for out/inout parameters.
        test_id = erpc.Reference()
        company_id = erpc.Reference()
        faults = erpc.Reference()

        # Read incoming parameters.
        elem_idx = codec.read_uint16()
        model_index = codec.read_uint16()

        # Invoke user implementation of remote function.
        _result = self._handler.fault_get_cur_cb(elem_idx, model_index, test_id, company_id, faults)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IBLEmesh_cbk_health_srv.SERVICE_ID,
            request=interface.IBLEmesh_cbk_health_srv.FAULT_GET_CUR_CB_ID,
            sequence=sequence))
        if test_id.value is None:
            raise ValueError("test_id is None")
        codec.write_uint8(test_id.value)
        if company_id.value is None:
            raise ValueError("company_id is None")
        codec.write_uint16(company_id.value)
        if faults.value is None:
            raise ValueError("faults is None")
        codec.start_write_list(len(faults.value))
        for _i0 in faults.value:
            codec.write_uint8(_i0)

        codec.write_int32(_result)

    def _handle_fault_get_reg_cb(self, sequence, codec):
        # Create reference objects to pass into handler for out/inout parameters.
        test_id = erpc.Reference()
        faults = erpc.Reference()

        # Read incoming parameters.
        elem_idx = codec.read_uint16()
        model_index = codec.read_uint16()
        company_id = codec.read_uint16()

        # Invoke user implementation of remote function.
        _result = self._handler.fault_get_reg_cb(elem_idx, model_index, company_id, test_id, faults)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IBLEmesh_cbk_health_srv.SERVICE_ID,
            request=interface.IBLEmesh_cbk_health_srv.FAULT_GET_REG_CB_ID,
            sequence=sequence))
        if test_id.value is None:
            raise ValueError("test_id is None")
        codec.write_uint8(test_id.value)
        if faults.value is None:
            raise ValueError("faults is None")
        codec.start_write_list(len(faults.value))
        for _i0 in faults.value:
            codec.write_uint8(_i0)

        codec.write_int32(_result)

    def _handle_fault_clear_cb(self, sequence, codec):
        # Read incoming parameters.
        elem_idx = codec.read_uint16()
        model_index = codec.read_uint16()
        company_id = codec.read_uint16()

        # Invoke user implementation of remote function.
        _result = self._handler.fault_clear_cb(elem_idx, model_index, company_id)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IBLEmesh_cbk_health_srv.SERVICE_ID,
            request=interface.IBLEmesh_cbk_health_srv.FAULT_CLEAR_CB_ID,
            sequence=sequence))
        codec.write_int32(_result)

    def _handle_fault_test_cb(self, sequence, codec):
        # Read incoming parameters.
        elem_idx = codec.read_uint16()
        model_index = codec.read_uint16()
        test_id = codec.read_uint8()
        company_id = codec.read_uint16()

        # Invoke user implementation of remote function.
        _result = self._handler.fault_test_cb(elem_idx, model_index, test_id, company_id)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IBLEmesh_cbk_health_srv.SERVICE_ID,
            request=interface.IBLEmesh_cbk_health_srv.FAULT_TEST_CB_ID,
            sequence=sequence))
        codec.write_int32(_result)

    def _handle_attn_on_cb(self, sequence, codec):
        # Read incoming parameters.
        elem_idx = codec.read_uint16()
        model_index = codec.read_uint16()

        # Invoke user implementation of remote function.
        self._handler.attn_on_cb(elem_idx, model_index)

    def _handle_attn_off_cb(self, sequence, codec):
        # Read incoming parameters.
        elem_idx = codec.read_uint16()
        model_index = codec.read_uint16()

        # Invoke user implementation of remote function.
        self._handler.attn_off_cb(elem_idx, model_index)


# Client for BLEmesh_cbk
class BLEmesh_cbkService(erpc.server.Service):
    def __init__(self, handler):
        super(BLEmesh_cbkService, self).__init__(interface.IBLEmesh_cbk.SERVICE_ID)
        self._handler = handler
        self._methods = {
                interface.IBLEmesh_cbk.OUTPUT_NUMBER_CB_ID: self._handle_output_number_cb,
                interface.IBLEmesh_cbk.OUTPUT_STRING_CB_ID: self._handle_output_string_cb,
                interface.IBLEmesh_cbk.INPUT_CB_ID: self._handle_input_cb,
                interface.IBLEmesh_cbk.INPUT_COMPLETE_CB_ID: self._handle_input_complete_cb,
                interface.IBLEmesh_cbk.UNPROVISIONED_BEACON_CB_ID: self._handle_unprovisioned_beacon_cb,
                interface.IBLEmesh_cbk.LINK_OPEN_CB_ID: self._handle_link_open_cb,
                interface.IBLEmesh_cbk.LINK_CLOSE_CB_ID: self._handle_link_close_cb,
                interface.IBLEmesh_cbk.COMPLETE_CB_ID: self._handle_complete_cb,
                interface.IBLEmesh_cbk.NODE_ADDED_CB_ID: self._handle_node_added_cb,
                interface.IBLEmesh_cbk.RESET_PROV_CB_ID: self._handle_reset_prov_cb,
                interface.IBLEmesh_cbk.HB_RECV_CB_ID: self._handle_hb_recv_cb,
                interface.IBLEmesh_cbk.HB_SUB_END_CB_ID: self._handle_hb_sub_end_cb,
                interface.IBLEmesh_cbk.LPN_FRIENDSHIP_ESTABLISHED_CB_ID: self._handle_lpn_friendship_established_cb,
                interface.IBLEmesh_cbk.LPN_FRIENDSHIP_TERMINATED_CB_ID: self._handle_lpn_friendship_terminated_cb,
                interface.IBLEmesh_cbk.LPN_POLLED_CB_ID: self._handle_lpn_polled_cb,
                interface.IBLEmesh_cbk.FRIEND_FRIENDSHIP_ESTABLISHED_CB_ID: self._handle_friend_friendship_established_cb,
                interface.IBLEmesh_cbk.FRIEND_FRIENDSHIP_TERMINATED_CB_ID: self._handle_friend_friendship_terminated_cb,
                interface.IBLEmesh_cbk.APPKEY_EVT_CB_ID: self._handle_appkey_evt_cb,
            }

    def _handle_output_number_cb(self, sequence, codec):
        # Read incoming parameters.
        act = codec.read_uint32()
        num = codec.read_uint32()

        # Invoke user implementation of remote function.
        self._handler.output_number_cb(act, num)

    def _handle_output_string_cb(self, sequence, codec):
        # Read incoming parameters.
        str = codec.read_string()

        # Invoke user implementation of remote function.
        self._handler.output_string_cb(str)

    def _handle_input_cb(self, sequence, codec):
        # Read incoming parameters.
        act = codec.read_uint32()
        size = codec.read_uint8()

        # Invoke user implementation of remote function.
        self._handler.input_cb(act, size)

    def _handle_input_complete_cb(self, sequence, codec):
        # Read incoming parameters.

        # Invoke user implementation of remote function.
        self._handler.input_complete_cb()

    def _handle_unprovisioned_beacon_cb(self, sequence, codec):
        # Read incoming parameters.
        uuid = []
        for _i0 in range(16):
            _v0 = codec.read_uint8()
            uuid.append(_v0)

        oob_info = codec.read_uint32()
        _n0 = codec.start_read_list()
        uri_hash = []
        for _i0 in range(_n0):
            _v0 = codec.read_uint32()
            uri_hash.append(_v0)


        # Invoke user implementation of remote function.
        self._handler.unprovisioned_beacon_cb(uuid, oob_info, uri_hash)

    def _handle_link_open_cb(self, sequence, codec):
        # Read incoming parameters.
        bearer = codec.read_uint32()

        # Invoke user implementation of remote function.
        self._handler.link_open_cb(bearer)

    def _handle_link_close_cb(self, sequence, codec):
        # Read incoming parameters.
        bearer = codec.read_uint32()

        # Invoke user implementation of remote function.
        self._handler.link_close_cb(bearer)

    def _handle_complete_cb(self, sequence, codec):
        # Read incoming parameters.
        net_idx = codec.read_uint16()
        addr = codec.read_uint16()

        # Invoke user implementation of remote function.
        self._handler.complete_cb(net_idx, addr)

    def _handle_node_added_cb(self, sequence, codec):
        # Read incoming parameters.
        net_idx = codec.read_uint16()
        uuid = []
        for _i0 in range(16):
            _v0 = codec.read_uint8()
            uuid.append(_v0)

        addr = codec.read_uint16()
        num_elem = codec.read_uint8()

        # Invoke user implementation of remote function.
        self._handler.node_added_cb(net_idx, uuid, addr, num_elem)

    def _handle_reset_prov_cb(self, sequence, codec):
        # Read incoming parameters.

        # Invoke user implementation of remote function.
        self._handler.reset_prov_cb()

    def _handle_hb_recv_cb(self, sequence, codec):
        # Read incoming parameters.
        sub = common.bt_mesh_hb_sub()._read(codec)
        hops = codec.read_uint8()
        feat = codec.read_uint16()

        # Invoke user implementation of remote function.
        self._handler.hb_recv_cb(sub, hops, feat)

    def _handle_hb_sub_end_cb(self, sequence, codec):
        # Read incoming parameters.
        sub = common.bt_mesh_hb_sub()._read(codec)

        # Invoke user implementation of remote function.
        self._handler.hb_sub_end_cb(sub)

    def _handle_lpn_friendship_established_cb(self, sequence, codec):
        # Read incoming parameters.
        net_idx = codec.read_uint16()
        friend_addr = codec.read_uint16()
        queue_size = codec.read_uint8()
        recv_window = codec.read_uint8()

        # Invoke user implementation of remote function.
        self._handler.lpn_friendship_established_cb(net_idx, friend_addr, queue_size, recv_window)

    def _handle_lpn_friendship_terminated_cb(self, sequence, codec):
        # Read incoming parameters.
        net_idx = codec.read_uint16()
        friend_addr = codec.read_uint16()

        # Invoke user implementation of remote function.
        self._handler.lpn_friendship_terminated_cb(net_idx, friend_addr)

    def _handle_lpn_polled_cb(self, sequence, codec):
        # Read incoming parameters.
        net_idx = codec.read_uint16()
        friend_addr = codec.read_uint16()
        retry = codec.read_bool()

        # Invoke user implementation of remote function.
        self._handler.lpn_polled_cb(net_idx, friend_addr, retry)

    def _handle_friend_friendship_established_cb(self, sequence, codec):
        # Read incoming parameters.
        net_idx = codec.read_uint16()
        lpn_addr = codec.read_uint16()
        recv_delay = codec.read_uint8()
        polltimeout = codec.read_uint32()

        # Invoke user implementation of remote function.
        self._handler.friend_friendship_established_cb(net_idx, lpn_addr, recv_delay, polltimeout)

    def _handle_friend_friendship_terminated_cb(self, sequence, codec):
        # Read incoming parameters.
        net_idx = codec.read_uint16()
        lpn_addr = codec.read_uint16()

        # Invoke user implementation of remote function.
        self._handler.friend_friendship_terminated_cb(net_idx, lpn_addr)

    def _handle_appkey_evt_cb(self, sequence, codec):
        # Read incoming parameters.
        app_idx = codec.read_uint16()
        net_idx = codec.read_uint16()
        evt = codec.read_uint32()

        # Invoke user implementation of remote function.
        self._handler.appkey_evt_cb(app_idx, net_idx, evt)


