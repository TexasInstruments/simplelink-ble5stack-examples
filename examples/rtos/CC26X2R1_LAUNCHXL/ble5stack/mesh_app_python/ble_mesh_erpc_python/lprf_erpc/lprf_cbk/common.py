#
# Generated by erpcgen 1.7.4 on Thu Jun  3 17:44:56 2021.
#
# AUTOGENERATED - DO NOT EDIT
#

import erpc

# Enumerators data types declarations
# @brief Bluetooth Mesh Access Layer
# @defgroup bt_mesh_access Bluetooth Mesh Access Layer
# @ingroup bt_mesh
# @{
BT_MESH_ADDR_UNASSIGNED = 0
BT_MESH_ADDR_ALL_NODES = 65535
BT_MESH_ADDR_PROXIES = 65532
BT_MESH_ADDR_FRIENDS = 65533
BT_MESH_ADDR_RELAYS = 65534

BT_MESH_KEY_UNUSED = 65535
BT_MESH_KEY_DEV = 65534
BT_MESH_KEY_DEV_LOCAL = 65535
BT_MESH_KEY_DEV_REMOTE = 65533
BT_MESH_KEY_DEV_ANY = 65532

BT_MESH_MODEL_ID_CFG_SRV = 0
BT_MESH_MODEL_ID_CFG_CLI = 1
BT_MESH_MODEL_ID_HEALTH_SRV = 2
BT_MESH_MODEL_ID_HEALTH_CLI = 3

BT_MESH_MODEL_ID_GEN_ONOFF_SRV = 4096
BT_MESH_MODEL_ID_GEN_ONOFF_CLI = 4097
BT_MESH_MODEL_ID_GEN_LEVEL_SRV = 4098
BT_MESH_MODEL_ID_GEN_LEVEL_CLI = 4099
BT_MESH_MODEL_ID_GEN_DEF_TRANS_TIME_SRV = 4100
BT_MESH_MODEL_ID_GEN_DEF_TRANS_TIME_CLI = 4101
BT_MESH_MODEL_ID_GEN_POWER_ONOFF_SRV = 4102
BT_MESH_MODEL_ID_GEN_POWER_ONOFF_SETUP_SRV = 4103
BT_MESH_MODEL_ID_GEN_POWER_ONOFF_CLI = 4104
BT_MESH_MODEL_ID_GEN_POWER_LEVEL_SRV = 4105
BT_MESH_MODEL_ID_GEN_POWER_LEVEL_SETUP_SRV = 4106
BT_MESH_MODEL_ID_GEN_POWER_LEVEL_CLI = 4107
BT_MESH_MODEL_ID_GEN_BATTERY_SRV = 4108
BT_MESH_MODEL_ID_GEN_BATTERY_CLI = 4109
BT_MESH_MODEL_ID_GEN_LOCATION_SRV = 4110
BT_MESH_MODEL_ID_GEN_LOCATION_SETUPSRV = 4111
BT_MESH_MODEL_ID_GEN_LOCATION_CLI = 4112
BT_MESH_MODEL_ID_GEN_ADMIN_PROP_SRV = 4113
BT_MESH_MODEL_ID_GEN_MANUFACTURER_PROP_SRV = 4114
BT_MESH_MODEL_ID_GEN_USER_PROP_SRV = 4115
BT_MESH_MODEL_ID_GEN_CLIENT_PROP_SRV = 4116
BT_MESH_MODEL_ID_GEN_PROP_CLI = 4117
BT_MESH_MODEL_ID_SENSOR_SRV = 4352
BT_MESH_MODEL_ID_SENSOR_SETUP_SRV = 4353
BT_MESH_MODEL_ID_SENSOR_CLI = 4354
BT_MESH_MODEL_ID_TIME_SRV = 4608
BT_MESH_MODEL_ID_TIME_SETUP_SRV = 4609
BT_MESH_MODEL_ID_TIME_CLI = 4610
BT_MESH_MODEL_ID_SCENE_SRV = 4611
BT_MESH_MODEL_ID_SCENE_SETUP_SRV = 4612
BT_MESH_MODEL_ID_SCENE_CLI = 4613
BT_MESH_MODEL_ID_SCHEDULER_SRV = 4614
BT_MESH_MODEL_ID_SCHEDULER_SETUP_SRV = 4615
BT_MESH_MODEL_ID_SCHEDULER_CLI = 4616
BT_MESH_MODEL_ID_LIGHT_LIGHTNESS_SRV = 4864
BT_MESH_MODEL_ID_LIGHT_LIGHTNESS_SETUP_SRV = 4865
BT_MESH_MODEL_ID_LIGHT_LIGHTNESS_CLI = 4866
BT_MESH_MODEL_ID_LIGHT_CTL_SRV = 4867
BT_MESH_MODEL_ID_LIGHT_CTL_SETUP_SRV = 4868
BT_MESH_MODEL_ID_LIGHT_CTL_CLI = 4869
BT_MESH_MODEL_ID_LIGHT_CTL_TEMP_SRV = 4870
BT_MESH_MODEL_ID_LIGHT_HSL_SRV = 4871
BT_MESH_MODEL_ID_LIGHT_HSL_SETUP_SRV = 4872
BT_MESH_MODEL_ID_LIGHT_HSL_CLI = 4873
BT_MESH_MODEL_ID_LIGHT_HSL_HUE_SRV = 4874
BT_MESH_MODEL_ID_LIGHT_HSL_SAT_SRV = 4875
BT_MESH_MODEL_ID_LIGHT_XYL_SRV = 4876
BT_MESH_MODEL_ID_LIGHT_XYL_SETUP_SRV = 4877
BT_MESH_MODEL_ID_LIGHT_XYL_CLI = 4878
BT_MESH_MODEL_ID_LIGHT_LC_SRV = 4879
BT_MESH_MODEL_ID_LIGHT_LC_SETUPSRV = 4880
BT_MESH_MODEL_ID_LIGHT_LC_CLI = 4881

   #Length of a short Mesh MIC.
BT_MESH_MIC_SHORT = 4
   #Length of a long Mesh MIC.
BT_MESH_MIC_LONG = 8

   #Special TTL value to request using configured default TTL
BT_MESH_TTL_DEFAULT = 255
   #Maximum allowed TTL value
BT_MESH_TTL_MAX = 127

SIG_MODEL = 0
VND_MODEL = 1

   #No fault has occurred.
BT_MESH_HEALTH_FAULT_NO_FAULT = 0
   #health_faults.
BT_MESH_HEALTH_FAULT_BATTERY_LOW_WARNING = 1
BT_MESH_HEALTH_FAULT_BATTERY_LOW_ERROR = 2
BT_MESH_HEALTH_FAULT_SUPPLY_VOLTAGE_TOO_LOW_WARNING = 3
BT_MESH_HEALTH_FAULT_SUPPLY_VOLTAGE_TOO_LOW_ERROR = 4
BT_MESH_HEALTH_FAULT_SUPPLY_VOLTAGE_TOO_HIGH_WARNING = 5
BT_MESH_HEALTH_FAULT_SUPPLY_VOLTAGE_TOO_HIGH_ERROR = 6
BT_MESH_HEALTH_FAULT_POWER_SUPPLY_INTERRUPTED_WARNING = 7
BT_MESH_HEALTH_FAULT_POWER_SUPPLY_INTERRUPTED_ERROR = 8
BT_MESH_HEALTH_FAULT_NO_LOAD_WARNING = 9
BT_MESH_HEALTH_FAULT_NO_LOAD_ERROR = 10
BT_MESH_HEALTH_FAULT_OVERLOAD_WARNING = 11
BT_MESH_HEALTH_FAULT_OVERLOAD_ERROR = 12
BT_MESH_HEALTH_FAULT_OVERHEAT_WARNING = 13
BT_MESH_HEALTH_FAULT_OVERHEAT_ERROR = 14
BT_MESH_HEALTH_FAULT_CONDENSATION_WARNING = 15
BT_MESH_HEALTH_FAULT_CONDENSATION_ERROR = 16
BT_MESH_HEALTH_FAULT_VIBRATION_WARNING = 17
BT_MESH_HEALTH_FAULT_VIBRATION_ERROR = 18
BT_MESH_HEALTH_FAULT_CONFIGURATION_WARNING = 19
BT_MESH_HEALTH_FAULT_CONFIGURATION_ERROR = 20
BT_MESH_HEALTH_FAULT_ELEMENT_NOT_CALIBRATED_WARNING = 21
BT_MESH_HEALTH_FAULT_ELEMENT_NOT_CALIBRATED_ERROR = 22
BT_MESH_HEALTH_FAULT_MEMORY_WARNING = 23
BT_MESH_HEALTH_FAULT_MEMORY_ERROR = 24
BT_MESH_HEALTH_FAULT_SELF_TEST_WARNING = 25
BT_MESH_HEALTH_FAULT_SELF_TEST_ERROR = 26
BT_MESH_HEALTH_FAULT_INPUT_TOO_LOW_WARNING = 27
BT_MESH_HEALTH_FAULT_INPUT_TOO_LOW_ERROR = 28
BT_MESH_HEALTH_FAULT_INPUT_TOO_HIGH_WARNING = 29
BT_MESH_HEALTH_FAULT_INPUT_TOO_HIGH_ERROR = 30
BT_MESH_HEALTH_FAULT_INPUT_NO_CHANGE_WARNING = 31
BT_MESH_HEALTH_FAULT_INPUT_NO_CHANGE_ERROR = 32
BT_MESH_HEALTH_FAULT_ACTUATOR_BLOCKED_WARNING = 33
BT_MESH_HEALTH_FAULT_ACTUATOR_BLOCKED_ERROR = 34
BT_MESH_HEALTH_FAULT_HOUSING_OPENED_WARNING = 35
BT_MESH_HEALTH_FAULT_HOUSING_OPENED_ERROR = 36
BT_MESH_HEALTH_FAULT_TAMPER_WARNING = 37
BT_MESH_HEALTH_FAULT_TAMPER_ERROR = 38
BT_MESH_HEALTH_FAULT_DEVICE_MOVED_WARNING = 39
BT_MESH_HEALTH_FAULT_DEVICE_MOVED_ERROR = 40
BT_MESH_HEALTH_FAULT_DEVICE_DROPPED_WARNING = 41
BT_MESH_HEALTH_FAULT_DEVICE_DROPPED_ERROR = 42
BT_MESH_HEALTH_FAULT_OVERFLOW_WARNING = 43
BT_MESH_HEALTH_FAULT_OVERFLOW_ERROR = 44
BT_MESH_HEALTH_FAULT_EMPTY_WARNING = 45
BT_MESH_HEALTH_FAULT_EMPTY_ERROR = 46
BT_MESH_HEALTH_FAULT_INTERNAL_BUS_WARNING = 47
BT_MESH_HEALTH_FAULT_INTERNAL_BUS_ERROR = 48
BT_MESH_HEALTH_FAULT_MECHANISM_JAMMED_WARNING = 49
BT_MESH_HEALTH_FAULT_MECHANISM_JAMMED_ERROR = 50
   # Start of the vendor specific fault values.
# All values below this are reserved for the Bluetooth Specification.
BT_MESH_HEALTH_FAULT_VENDOR_SPECIFIC_START = 128

class bt_mesh_output_action:
    BT_MESH_NO_OUTPUT_ERPC = 0
    BT_MESH_BLINK_ERPC = 1
    BT_MESH_BEEP_ERPC = 2
    BT_MESH_VIBRATE_ERPC = 4
    BT_MESH_DISPLAY_NUMBER_ERPC = 8
    BT_MESH_DISPLAY_STRING_ERPC = 16

#Available Provisioning input authentication actions.
class bt_mesh_input_action:
    BT_MESH_NO_INPUT_ERPC = 0
    BT_MESH_PUSH_ERPC = 1
    BT_MESH_TWIST_ERPC = 2
    BT_MESH_ENTER_NUMBER_ERPC = 4
    BT_MESH_ENTER_STRING_ERPC = 8

#Available Provisioning bearers.
class bt_mesh_prov_bearer:
    BT_MESH_PROV_ADV_ERPC = 1
    BT_MESH_PROV_GATT_ERPC = 2

#Out of Band information location.
class bt_mesh_prov_oob_info:
    BT_MESH_PROV_OOB_OTHER_ERPC = 1
    BT_MESH_PROV_OOB_URI_ERPC = 2
    BT_MESH_PROV_OOB_2D_CODE_ERPC = 4
    BT_MESH_PROV_OOB_BAR_CODE_ERPC = 8
    BT_MESH_PROV_OOB_NFC_ERPC = 16
    BT_MESH_PROV_OOB_NUMBER_ERPC = 32
    BT_MESH_PROV_OOB_STRING_ERPC = 64
    BT_MESH_PROV_OOB_ON_BOX_ERPC = 128
    BT_MESH_PROV_OOB_IN_BOX_ERPC = 256
    BT_MESH_PROV_OOB_ON_PAPER_ERPC = 512
    BT_MESH_PROV_OOB_IN_MANUAL_ERPC = 1024
    BT_MESH_PROV_OOB_ON_DEV_ERPC = 2048

BT_MESH_NET_PRIMARY = 0

BT_MESH_RELAY_DISABLED = 0
BT_MESH_RELAY_ENABLED = 1
BT_MESH_RELAY_NOT_SUPPORTED = 2

BT_MESH_BEACON_DISABLED = 0
BT_MESH_BEACON_ENABLED = 1

BT_MESH_GATT_PROXY_DISABLED = 0
BT_MESH_GATT_PROXY_ENABLED = 1
BT_MESH_GATT_PROXY_NOT_SUPPORTED = 2

BT_MESH_FRIEND_DISABLED = 0
BT_MESH_FRIEND_ENABLED = 1
BT_MESH_FRIEND_NOT_SUPPORTED = 2

BT_MESH_NODE_IDENTITY_STOPPED = 0
BT_MESH_NODE_IDENTITY_RUNNING = 1
BT_MESH_NODE_IDENTITY_NOT_SUPPORTED = 2

BT_MESH_FEAT_RELAY = 1
BT_MESH_FEAT_PROXY = 2
BT_MESH_FEAT_FRIEND = 4
BT_MESH_FEAT_LOW_POWER = 8
BT_MESH_FEAT_SUPPORTED = 15

class bt_mesh_key_evt:
    BT_MESH_KEY_ADDED = 0
    BT_MESH_KEY_DELETED = 1
    BT_MESH_KEY_UPDATED = 2
    BT_MESH_KEY_SWAPPED = 3
    BT_MESH_KEY_REVOKED = 4


# Structures data types declarations
#Message sending context.
class bt_mesh_msg_ctx_raw(object):
    def __init__(self, net_idx=None, app_idx=None, addr=None, recv_dst=None, recv_rssi=None, recv_ttl=None, send_rel=None, send_ttl=None):
        self.net_idx = net_idx # uint16
        self.app_idx = app_idx # uint16
        self.addr = addr # uint16
        self.recv_dst = recv_dst # uint16
        self.recv_rssi = recv_rssi # int8
        self.recv_ttl = recv_ttl # uint8
        self.send_rel = send_rel # bool
        self.send_ttl = send_ttl # uint8

    def _read(self, codec):
        self.net_idx = codec.read_uint16()
        self.app_idx = codec.read_uint16()
        self.addr = codec.read_uint16()
        self.recv_dst = codec.read_uint16()
        self.recv_rssi = codec.read_int8()
        self.recv_ttl = codec.read_uint8()
        self.send_rel = codec.read_bool()
        self.send_ttl = codec.read_uint8()
        return self

    def _write(self, codec):
        if self.net_idx is None:
            raise ValueError("net_idx is None")
        codec.write_uint16(self.net_idx)
        if self.app_idx is None:
            raise ValueError("app_idx is None")
        codec.write_uint16(self.app_idx)
        if self.addr is None:
            raise ValueError("addr is None")
        codec.write_uint16(self.addr)
        if self.recv_dst is None:
            raise ValueError("recv_dst is None")
        codec.write_uint16(self.recv_dst)
        if self.recv_rssi is None:
            raise ValueError("recv_rssi is None")
        codec.write_int8(self.recv_rssi)
        if self.recv_ttl is None:
            raise ValueError("recv_ttl is None")
        codec.write_uint8(self.recv_ttl)
        if self.send_rel is None:
            raise ValueError("send_rel is None")
        codec.write_bool(self.send_rel)
        if self.send_ttl is None:
            raise ValueError("send_ttl is None")
        codec.write_uint8(self.send_ttl)

    def __str__(self):
        return "<%s@%x net_idx=%s app_idx=%s addr=%s recv_dst=%s recv_rssi=%s recv_ttl=%s send_rel=%s send_ttl=%s>" % (self.__class__.__name__, id(self), self.net_idx, self.app_idx, self.addr, self.recv_dst, self.recv_rssi, self.recv_ttl, self.send_rel, self.send_ttl)

    def __repr__(self):
        return self.__str__()

class net_buf_simple_raw(object):
    def __init__(self, data=None, size=None, __buf=None):
        self.data = data # list<uint8>
        self.size = size # uint16
        self.__buf = __buf # uint8

    @property
    def len(self):
        return len(self.data)

    def _read(self, codec):
        _n0 = codec.start_read_list()
        self.data = []
        for _i0 in range(_n0):
            _v0 = codec.read_uint8()
            self.data.append(_v0)

        self.size = codec.read_uint16()
        self.__buf = codec.read_uint8()
        return self

    def _write(self, codec):
        if self.data is None:
            raise ValueError("data is None")
        codec.start_write_list(len(self.data))
        for _i0 in self.data:
            codec.write_uint8(_i0)

        if self.size is None:
            raise ValueError("size is None")
        codec.write_uint16(self.size)
        if self.__buf is None:
            raise ValueError("__buf is None")
        codec.write_uint8(self.__buf)

    def __str__(self):
        return "<%s@%x data=%s size=%s __buf=%s>" % (self.__class__.__name__, id(self), self.data, self.size, self.__buf)

    def __repr__(self):
        return self.__str__()

class bt_mesh_hb_sub(object):
    def __init__(self, period=None, remaining=None, src=None, dst=None, count=None, min_hops=None, max_hops=None):
        self.period = period # uint32
        self.remaining = remaining # uint32
        self.src = src # uint16
        self.dst = dst # uint16
        self.count = count # uint16
        self.min_hops = min_hops # uint8
        self.max_hops = max_hops # uint8

    def _read(self, codec):
        self.period = codec.read_uint32()
        self.remaining = codec.read_uint32()
        self.src = codec.read_uint16()
        self.dst = codec.read_uint16()
        self.count = codec.read_uint16()
        self.min_hops = codec.read_uint8()
        self.max_hops = codec.read_uint8()
        return self

    def _write(self, codec):
        if self.period is None:
            raise ValueError("period is None")
        codec.write_uint32(self.period)
        if self.remaining is None:
            raise ValueError("remaining is None")
        codec.write_uint32(self.remaining)
        if self.src is None:
            raise ValueError("src is None")
        codec.write_uint16(self.src)
        if self.dst is None:
            raise ValueError("dst is None")
        codec.write_uint16(self.dst)
        if self.count is None:
            raise ValueError("count is None")
        codec.write_uint16(self.count)
        if self.min_hops is None:
            raise ValueError("min_hops is None")
        codec.write_uint8(self.min_hops)
        if self.max_hops is None:
            raise ValueError("max_hops is None")
        codec.write_uint8(self.max_hops)

    def __str__(self):
        return "<%s@%x period=%s remaining=%s src=%s dst=%s count=%s min_hops=%s max_hops=%s>" % (self.__class__.__name__, id(self), self.period, self.remaining, self.src, self.dst, self.count, self.min_hops, self.max_hops)

    def __repr__(self):
        return self.__str__()


